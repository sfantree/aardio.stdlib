//listview 列表视图
import xcgui.ctrl.metaProperty;
namespace xcgui.ctrl;

class listview{

	ctor(hParentPointer,tParam){ 
		if(! (hParentPointer || tParam) ) return null;
		if(type(tParam)!=type.table){
			this.hPointer = topointer( hParentPointer);
		}
		else {
			if( tParam.resource ) ..xcgui.res.load(tParam.resource);
			if(tParam.layout){
				var hEle = ..xcgui.loadLayout(tParam.layout,hParentPointer);
				if( ::Xcgui.XC_IsHELE (hEle) ){ 
					if( ::Xcgui.XEle_GetType(hEle) != 0x1D/*_XC_LISTVIEW*/) return null; 
					::Xcgui.XEle_AdjustLayoutObject(hEle);
					this.hPointer = topointer(hEle);
				}
				else {
					return null;
				}
			}
			else {
				this.hPointer = topointer( ::Xcgui.XListView_Create (tParam.left,tParam.top,tParam.right-tParam.left,tParam.bottom-tParam.top,hParentPointer) );	
			}	
		}
		this@ = _metaProperty;
		this.loadTemplate($"~\lib\xcgui\.res\ListView_Item.xml");
	};
}

var xcguistate = ..xcgui.state;
listview._metaProperty = metaProperty(	
	adapter = {
		_set = function(v){
			owner[["(adapter)"]] = v;
			 ::Xcgui.XListView_BindAdapter(owner.hPointer,v);
		}
		_get = function(){
			if( owner[["(adapter)"]] ) return owner[["(adapter)"]];
			var ad = ..xcgui.adapter.listview( ::Xcgui.XListView_GetAdapter(owner.hPointer) );
			owner[["(adapter)"]] =  ad or owner.createAdapter();
			return owner[["(adapter)"]];
		}
	}
	createAdapter = function(){
		return ..xcgui.adapter.listview( ::Xcgui.XListView_CreateAdapter(owner.hPointer) );
	}
	groupAddField = function(fieldName){
		return owner.adapter.groupAddField(fieldName)
	}
	groupAddString = function(value){
		return owner.adapter.groupAddString(value)
	}
	groupAddFieldString = function(fieldName,value){
		return owner.adapter.groupAddFieldString(fieldName,value)
	}
	groupAddImage = function(image){
		return owner.adapter.groupAddImage(image)
	}
	groupAddFieldImage = function(fieldName,image){
		return owner.adapter.groupAddFieldImage(fieldName,image)
	}
	groupSetString = function(group,iField,value){
		return owner.adapter.groupSetString(group,iField,value)
	}
	groupSetFieldString = function(group,fieldName,value){
		return owner.adapter.groupSetFieldString(group,fieldName,value)
	}
	groupSetImage = function(group,iField,image){
		return owner.adapter.groupSetImage(group,iField,image)
	}
	groupSetFieldImage = function(group,fieldName,image){
		return owner.adapter.groupSetFieldImage(group,fieldName,image)
	}
	groupCount = function(){
		return owner.adapter.groupCount()
	}
	groupDelete = function(group){
		return owner.adapter.groupDelete(group)
	}
	groupClear = function(){
		return owner.adapter.groupClear()
	}
	groupClearChild = function(group){
		return owner.adapter.groupClearChild(group)
	}
	groupDeleteField = function(iField){
		return owner.adapter.groupDeleteField(iField)
	}
	addField = function(fieldName){
		return owner.adapter.addField(fieldName)
	}
	count = function(group){
		return owner.adapter.count(group)
	}
	addString = function(group,value){
		return owner.adapter.addString(group,value)
	}
	addFieldString = function(group,fieldName,value){
		return owner.adapter.addFieldString(group,fieldName,value)
	}
	addImage = function(group,image){
		return owner.adapter.addImage(group,image)
	}
	addFieldImage = function(group,fieldName,image){
		return owner.adapter.addFieldImage(group,fieldName,image)
	}
	delete = function(group,item){
		return owner.adapter.delete(group,item)
	}
	clear = function(){
		return owner.adapter.clear()
	}
	clearItem = function(){
		return owner.adapter.clearItem()
	}
	deleteField = function(iField){
		return owner.adapter.deleteField(iField)
	}
	getFieldString = function(group,item,fieldName){
		return owner.adapter.getFieldString(group,item,fieldName)
	}
	getFieldImage = function(group,item,fieldName){
		return owner.adapter.getFieldImage(group,item,fieldName)
	}
	setString = function(group,item,iField,value){
		return owner.adapter.setString(group,item,iField,value)
	}
	setFieldString = function(group,item,fieldName,value){
		return owner.adapter.setFieldString(group,item,fieldName,value)
	}
	setImage = function(group,item,iField,image){
		return owner.adapter.setImage(group,item,iField,image)
	}
	setFieldImage = function(group,item,fieldName,image){
		return owner.adapter.setFieldImage(group,item,fieldName,image)
	}
	loadTemplate = function(path){
		if( #path < 0x410/*_MAX_PATH_U8*/  ){
			if ..io.exist(path) return ::Xcgui.XListBox_SetItemTemplateXML(owner.hPointer,..io.fullpath(path));
			path = ..string.loadBuffer(path) : path;
		}
		return ::Xcgui.XListBox_SetItemTemplateXMLFromStringA(owner.hPointer,path);
	}
	getTemplateObject = function(iGroup,iItem,nTempItemID){
		return ..xcgui.object( ::Xcgui.XListView_GetTemplateObject(owner.hPointer,iGroup,iItem,nTempItemID) );
	}
	getTemplateObjectGroup = function(iGroup,nTempItemID){
		return ..xcgui.object( ::Xcgui.XListView_GetTemplateObjectGroup(owner.hPointer,iGroup,nTempItemID) );
	}
	getItemId = function(hXCGUI){
		var group,item = {int value},{int value}
		::Xcgui.XListView_GetItemIDFromHXCGUI(owner.hPointer,hXCGUI,group,item);
		return group.value,item.value;
	}
	hitTest = function(x,y){
		var group,item = {int value},{int value}
		if( ::Xcgui.XListView_HitTest(owner.hPointer,::POINT(x,y),group,item) )
			return group.value,item.value;
	}
	hitTestOffset = function(x,y){
		var group,item = {int value},{int value}
		if( ::Xcgui.XListView_HitTestOffset(owner.hPointer,::POINT(x,y),group,item) )
			return group.value,item.value;
	}
	enableMultiSel = function(bEnable){
		return ::Xcgui.XListView_EnableMultiSel(owner.hPointer,bEnable);
	}
	setDrawItemBkFlags = function(nFlags){
		return ::Xcgui.XListView_SetDrawItemBkFlags(owner.hPointer,nFlags);
	}
	setSelectItem = function(iGroup,iItem){
		return ::Xcgui.XListView_SetSelectItem(owner.hPointer,iGroup,iItem);
	}
	getSelectItem = function(piGroup,piItem){
		var group,item = {int value},{int value}
		return ::Xcgui.XListView_GetSelectItem(owner.hPointer,group,item);
	}
	getSelectionCount = function(){
		return ::Xcgui.XListView_GetSelectItemCount(owner.hPointer);
	}
	getSelections = function(pArray,nArraySize){
		var size = owner.getSelectionCount();
		if(!size) return;
		
		var array ={ struct items[] = {{int group;int item};length=size}}
		size = ::Xcgui.XListView_GetSelectItemAll(owner.hPointer,array,size);
		return array.items;
	}
	selectAll = function(){
		return ::Xcgui.XListView_SetSelectItemAll(owner.hPointer);
	}
	deselectAll = function(){
		return ::Xcgui.XListView_CancelSelectItemAll(owner.hPointer);
	}
	setColumnSpace = function(space){
		return ::Xcgui.XListView_SetColumnSpace(owner.hPointer,space);
	}
	setAlignSizeLeft = function(size){
		return ::Xcgui.XListView_SetAlignSizeLeft(owner.hPointer,size);
	}
	setAlignSizeTop = function(size){
		return ::Xcgui.XListView_SetAlignSizeTop(owner.hPointer,size);
	}
	setItemSize = function(width,height){
		return ::Xcgui.XListView_SetItemSize(owner.hPointer,width,height);
	}
	getItemSize = function(pSize){
		return ::Xcgui.XListView_GetItemSize(owner.hPointer,pSize);
	}
	setGroupHeight = function(height){
		return ::Xcgui.XListView_SetGroupHeight(owner.hPointer,height);
	}
	getGroupHeight = function(){
		return ::Xcgui.XListView_GetGroupHeight(owner.hPointer);
	}
	setGroupUserData = function(iGroup,nData){
		return ::Xcgui.XListView_SetGroupUserData(owner.hPointer,iGroup,nData);
	}
	setItemUserData = function(iGroup,iItem,nData){
		return ::Xcgui.XListView_SetItemUserData(owner.hPointer,iGroup,iItem,nData);
	}
	getGroupUserData = function(iGroup){
		return ::Xcgui.XListView_GetGroupUserData(owner.hPointer,iGroup);
	}
	getItemUserData = function(iGroup,iItem){
		return ::Xcgui.XListView_GetItemUserData(owner.hPointer,iGroup,iItem);
	}
	bkAddItemBorder = function(state,width,alpha,color,g,b){
		if(b!==null) color = ..gdi.RGB(color,g,b);
		return ::Xcgui.XListView_AddItemBkBorder(owner.hPointer,xcguistate[state] : state,color,alpha,width);
	}
	bkAddItemFill = function(state,alpha,color,g,b){
		if(b!==null) color = ..gdi.RGB(color,g,b)
		return ::Xcgui.XListView_AddItemBkFill(owner.hPointer,xcguistate[state] : state,color,alpha);
	}
	bkAddItemImage = function(nState,image){
		if(type(image) == type.string) image = ..xcgui.image(image,repeat,top,right,bottom);
		return ::Xcgui.XListView_AddItemBkImage(owner.hPointer,xcguistate[state] : state,image);
	}
	bkItemInfoCount = function(){
		return ::Xcgui.XListView_GetItemBkInfoCount(owner.hPointer);
	}
	bkItemInfoClear = function(){
		return ::Xcgui.XListView_ClearItemBkInfo(owner.hPointer);
	}
	refreshData = function(){
		return ::Xcgui.XListView_RefreshData(owner.hPointer);
	}
	refreshItem = function(iGroup,iItem){
		return ::Xcgui.XListView_RefreshItem(owner.hPointer,iGroup,iItem);
	}
	expandGroup = function(iGroup,bExpand){
		return ::Xcgui.XListView_ExpandGroup(owner.hPointer,iGroup,bExpand);
	}
	rowSpace = {
		_set = function(v){
			 ::Xcgui.XListView_SetRowSpace(owner.hPointer,v);
		} 
	}
)

/**intellisense()
xcgui.ctrl.listview(.(父窗口,参数表) = 创建一个列表视图
xcgui.ctrl.listview() = !stdxclistview.
win.ui.ctrl.xclistview() = !stdxclistview.
end intellisense**/

/**intellisense(!stdxclistview)
getScrollView() = 获取滚动视图接口\n!stdxcscrollview.
createAdapter() = 创建数据适配器，根据绑定的项模板初始化数据适配器的列\n!stdxcadlistview.
adapter = 数据适配器\n!stdxcadlistview.
groupAddField(__) = 组操作,添加数据列
groupAddString(__) = 组操作,添加组,数据默认填充到第一列
groupAddFieldString(.(fieldName,value) = 组操作,添加组,数据填充指定列
groupAddImage(__) = 组操作,添加组,数据默认填充第一列
groupAddFieldImage(.(fieldName,image) = 组操作,添加组,数据填充指定列
groupSetString(.(group,iField,value) = 组操作,设置指定项数据
groupSetFieldString(.(group,fieldName,value) = 组操作,设置指定项数据
groupSetImage(.(group,iField,image) = 组操作,设置指定项数据
groupSetFieldImage(.(group,fieldName,image) = 组操作,设置指定项数据
groupCount() = 组操作,获取组数量
groupClear() = 删除所有的组
groupDelete(__) = 删除组,自动删除子项,参数指定索引
groupDeleteField(__) = 删除组的列,参数指定索引
addField(__) = 项操作,添加列
count(__) = 项操作,获取指定组中项数量
addString(.(group,value) = 项操作,添加项
addFieldString(.(group,fieldName,value) = 项操作,添加项,数据填充指定列
addImage(.(group,image) = 项操作,添加项
addFieldImage(.(group,fieldName,image) = 项操作,添加项,填充指定列数据
groupClearChild(__) = 删除指定组的所有子项
delete(.(group,item) = 删除项
clear() = 删除所有(组,项,列)
clearItem() = 删除所有的项
deleteField(__) = 删除项的列
getFieldString(.(group,item,fieldName) = 项操作,获取项文本内容
getFieldImage(.(group,item,fieldName) = 项操作,获取项图片句柄
setString(.(group,item,iField,value) = 项操作,数据填充指定列
setFieldString(.(group,item,fieldName,value) = 项操作,数据填充指定列
setImage(.(group,item,iField,image) = 项操作,数据填充指定列
setFieldImage(.(group,item,fieldName,image) = 项操作,数据填充指定列
loadTemplate(__) = 设置列表项模板文件\n参数支持文件路径、资源路径、或内存数据
getTemplateObject(.(iGroup,iItem,nTempItemID) = 通过模板项ID,获取实例化模板项ID对应的对象句柄
getTemplateObjectGroup(.(iGroup,nTempItemID) = 通过模板项ID,获取实例化模板项ID对应的对象句柄
getItemId(.(hXCGUI,piGroup,piItem) = 获取当前对象所在模板实例,属于列表视中哪一个项
hitTest(.(pPt,pOutGroup,pOutItem) = 检查坐标点所在项
hitTestOffset(.(pPt,pOutGroup,pOutItem) = 检查坐标点所在项,自动添加滚动视图偏移量
enableMultiSel(__) = 启用多选
setDrawItemBkFlags(__) = 设置是否绘制指定状态下项的背景
setSelectItem(.(iGroup,iItem) = 设置选择项
getSelectItem(.(piGroup,piItem) = 获取选择项
getSelectionCount() = 获取选择项数量
getSelections(.(pArray,nArraySize) = 获取选择的项ID
selectAll() = 选择所有的项
deselectAll() = 取消选择所有项
setColumnSpace(__) = 设置列间隔大小
rowSpace = 设置行间隔大小,只写属性
setAlignSizeLeft(__) = 设置左边对齐大小
setAlignSizeTop(__) = 设置上边对齐大小
setItemSize(.(width,height) = 设置项大小
getItemSize(__) = 获取项大小
setGroupHeight(__) = 设置组高度
getGroupHeight() = 获取组高度
setGroupUserData(.(iGroup,nData) = 设置组用户数据
setItemUserData(.(iGroup,iItem,nData) = 设置项用户数据
getGroupUserData(__) = 获取组用户数据
getItemUserData(.(iGroup,iItem) = 获取项用户数据
bkAddItemBorder(.(状态,线宽,透明度,RGB颜色) = 添加项背景内容边框\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemBorder(.(状态,线宽,透明度,R,G,B) = 添加项背景内容边框\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemFill(.(状态,透明度,RGB颜色) = 添加项背景内容填充\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemFill(.(状态,透明度,R,G,B) = 添加项背景内容填充\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemImage(.(状态,图像) = 添加项背景内容图片,参数为xcgui.image对象
bkItemInfoCount() = 获取项背景内容数目
bkItemInfoClear() = 清除项背景内容
refreshData() = 刷新数据
refreshItem(.(iGroup,iItem) = 刷新指定项模板,以便更新UI
expandGroup(.(iGroup,bExpand) = 展开组
background = 获取控件的背景管理器\n!stdxcbkmanager.
bkAddFill(.("状态",图像,颜色数值或RGB分量) = 设置控件填充颜色\n可用的背景状态请查看xcgui.state
bkAddImage(.("状态",图像) = 设置窗口顶部图像\n图像可直接指定路径或资源路径,也可使用xcgui.image对象
bkAddBorder(.("状态",线宽,透明度,RGB颜色) = 添加背景边框\n状态可以是字符串或数值,可用值参考xucgui.state
id = ID值
z = Z序
topmost(true) = Z序置顶
getWindow() = 返回父窗体\n!stdxcwnd
hitEle(.(x,y) = 根据指定的坐标获取子节点\n!stdxcele
getParent() = 获取父节点\n!stdxcele
getParentHandle() = 获取父节点句柄
getParentType() = 获取父节点类型
getObjectType() = 获取节点类型
addEle(__) = 添加子节点
insertEle(.(child,index) = 在index指定的位置插入子节点child 
remove() = 移除元素,但不销毁.
disabled = 是否禁用
hide = 是否隐藏;
pointerEvents = 是否触发鼠标事件\n值设为false可实现鼠标穿透效果
transparent = 是否支持背景透明\n透明PNG图像需要设置此属性为true
alpha = 透明度
color = 字体颜色
border = 设置是否允许显示边框\n只写属性
focusBorderColor = 焦点边框颜色
enableDrawFocus = 是否允许绘制焦点
focusBorder = 是否启用焦点
scrollView = 是否允许显示滚动
tabstop = 是否允许键盘切换焦点
tooltip = 提示文本
css("__") = 修改CSS样式名\n无参数时返回CSS样式名
popupToolTip(.(x,y) = 在指定坐标弹出提示
getFont() = 获取字体\n!stdxcfont.
setFont(.(字体名,字体大小,样式) = 创建字体
setFont(.(字体名） = 设置字体
setFont(.(name="字体"） = 设置字体\n参数为LOGFONT对象，或指定部分LOGFONT属性的表
setFont(.(句柄） = 设置字体\n参数为字体句柄
getClientRect() = 返回客户区区块,::RECT对象\n!rect. 
getRect = 返回控件区块,::RECT对象\n!rect. 
setRect(.(rect,是否重绘) = 设置区块,参数@1为::RECT对象
getLogicRect = 返回控件逻辑区块,::RECT对象\n!rect. 
setLogicRect(.(rect,是否重绘) = 设置控件逻辑区块,参数@1为::RECT对象
setPos(.(x坐标,y坐标,宽,高) = 调整控件位置或排序,所有参数可选\n同时指定x,y坐标则移动位置\n同时指定宽高则改变大小
getPos() = 返回相对坐标,宽,高,返回4个值：x,y,cx,cy
autoResize = 是否允许aardio窗口自动调整控件位置\n只有在窗口设计器中添加的控件,并是aardio窗口对象的成员时此属性才有效
getWidth() = 获取宽度
getHeight() = 获取高度
layoutObject = 获取或绑定布局对象\n获取布局对象时如果布局对象不存在则自动创建\n!stdxclayoutObj.
getParentLayoutObject() = 获取父布局对象
adjustLayoutObject() = 调整布局对象
adjustLayout() = 调整布局
setLayoutHeight(.(宽度,选项) = 设置布局宽度
setLayoutWidth(.(高度,选项) = 设置布局高度 
cursor = 鼠标指针
redraw() = 重绘
redrawRect(__) = 重绘区块,参数为::RECT对象
close() = 销毁控件
post("click__",wParam,lParam) = 发送消息,不获取返回值\n参数@1可使用任何字符串自定义新的控件消息
send("click__",wParam,lParam) = 发送消息,获取消息处理函数的返回值\n任何一个事件回调函数返回非null值都会结束当次事件并返回该值,\n参数@1可使用任何字符串自定义新的控件消息
.onMessage= @.on("message",function(message,wParam,lParam){
	if( message == "自定义消息" ) return __/*返回非null值结束本次回调*/;
})
.onTempCreate = @.on("listviewTempCreate",function(pItem){
	__
})
.onTempDestroy = @.on("listviewTempDestroy",function(pItem){
	__
})
.onTempCreateEnd = @.on("listviewTempCreateEnd",function(pItem){
	__
})
.onTempAdjustCoordinate = @.on("listviewTempAdjustCoordinate",function(pItem){
	__
})
.onDrawitem = @.on("listviewDrawitem",function(hDraw,pItem){
	__
})
.onSelect = @.on("listviewSelect",function(group,item){
	__
})
.onExpand = @.on("listviewExpand",function(group,expanded){
	__
})
.onPaint = @.on("paint",function(hDraw){
	__
})
.onPaintEnd = @.on("paintEnd",function(hDraw){
	__
})
.onPaintScrollView = @.on("paintScrollView",function(hDraw){

})
.onMove = @.on("move",function(nFlags,pt){
	
	__
})
.onEnter = @.on("enter",function(){

})
.onHover = @.on("hover",function(nFlags, pt){
	
	__
})
.onLeave = @.on("leave",function(hEleHover){

})
.onWheel = @.on("wheel",function(nFlags,pt){
	
	__
})
.onLbuttonDown = @.on("lbuttonDown",function(nFlags, pt){
	
	__
})
.onLbuttonUp = @.on("lbuttonUp",function(nFlags, pt){
	
	__
})
.onRbuttonDown = @.on("rbuttonDown",function(nFlags, pt){
	
	__
})
.onRbuttonUp = @.on("rbuttonUp",function(nFlags, pt){
	
	__
})
.onDblclick = @.on("dblclick",function(nFlags, pt){
	
	__
})
.onFocus = @.on("focus",function(){
	__
})
.onKillFocus = @.on("killFocus",function(){
	__
})
.onDestroy = @.on("destroy",function(){
	__
})
.onSize = @.on("size",function(){
	__
})
.onShow = @.on("show",function(shown){
	__
})
.onSetFont = @.on("font",function(){
	__
})
.onKeyDown = @.on("keyDown",function(wParam,lParam){
	__
})
.onChar = @.on("char",function(wParam,lParam){
	__
})
.onSetCapture = @.on("setCapture",function(){
	__
})
.onKillCapture = @.on("killCapture",function(){
	__
})
.onCursor = @.on("cursor",function(wParam,lParam){
	__
})
.onDropfiles = @.on("dropfiles",function(wParam){
	var files = ..win.getDropFile(wParam) __
})
.onMenuPopup = @.on("menuPopup",function(hMenu){
	__
})
.onMenuPopupWnd = @.on("menuPopupWnd",function(hMenu,pInfo){
	__
})
.onMenuSelect = @.on("menuSelect",function(id){
	__
})
.onMenuDrawBackground = @.on("menuDrawBackground",function(hDraw,pInfo){
	__
})
.onMenuDrawitem = @.on("menuDrawitem",function(hDraw,pInfo){
	__
})
.onMenuExit = @.on("menuExit",function(){
	__
})
end intellisense**/
