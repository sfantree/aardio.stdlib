//button 按钮
import xcgui.ctrl.metaProperty;
namespace xcgui.ctrl;

class button{

	ctor(hParentPointer,tParam){
		if(! (hParentPointer || tParam) ) return null;
		if(type(tParam)!=type.table){
			this.hPointer = topointer( hParentPointer);
		}
		else {
			if( tParam.resource ) ..xcgui.res.load(tParam.resource);
			if(tParam.layout){
				var hEle = ..xcgui.loadLayout(tParam.layout,hParentPointer);
				if( ::Xcgui.XC_IsHELE (hEle) ){ 
					if( ::Xcgui.XEle_GetType(hEle) != 0x16/*_XC_BUTTON*/ ) return null; 
					::Xcgui.XEle_AdjustLayoutObject(hEle);
					this.hPointer = topointer(hEle);
				}
				else {
					return null;
				}
			}
			else{
				this.hPointer = topointer( ::Xcgui.XBtn_Create(tParam.left,tParam.top,tParam.right-tParam.left,tParam.bottom-tParam.top,tParam.text,hParentPointer) );
			}
		}
		
		this@ = _metaProperty;
		if( tParam ){
			if(tParam.type){
				::Xcgui.XBtn_SetTypeEx(this.hPointer,tParam.type);
				tParam.type = null;
			}
			if(tParam.border)tParam.focusBorder = true;
			elseif(!tParam.enableDrawFocus) tParam.enableDrawFocus = false;
		} 
	};
}

class radiobutton{
	ctor(hParentPointer,tParam){
		if( tParam ) tParam.type = 1;
		
		return ..xcgui.ctrl.button(hParentPointer,tParam)
	};
}

class checkbox{

	ctor(hParentPointer,tParam){
		if( tParam ) tParam.type = 2;
		return ..xcgui.ctrl.button(hParentPointer,tParam)
	};
}

class closebutton{

	ctor(hParentPointer,tParam){
		if( tParam ){ tParam.type = 3;
		..io.print("1")
		if( !( #tParam.text || tParam.font || tParam.bkImage || tParam.repaat ) ){
			tParam.text = "r";
			tParam.font = ::LOGFONT(name="Marlett";point=10)
		} 
		}
		return ..xcgui.ctrl.button(hParentPointer,tParam)
	};
}

class minbutton{

	ctor(hParentPointer,tParam){
		if( tParam ) tParam.type = 4;
		return ..xcgui.ctrl.button(hParentPointer,tParam)
	};
}

class maxbutton{

	ctor(hParentPointer,tParam){
		if( tParam ) tParam.type = 5;
		return ..xcgui.ctrl.button(hParentPointer,tParam)
	};
}

button._metaProperty = metaProperty(
    			
	group = {
		_get = function(){ 
			return  ::Xcgui.XBtn_GetGroupID(owner.hPointer);
		}
		_set = function( v ){
			return ::Xcgui.XBtn_SetGroupID(owner.hPointer,v);
		} 	
	}
	type = {
		_get = function(){ 
			return  ::Xcgui.XBtn_GetType(owner.hPointer);
		}
		_set = function( v ){
			return ::Xcgui.XBtn_SetTypeEx(owner.hPointer,v);
		} 	
	};
	style = {
		_get = function(){ 
			return  ::Xcgui.XBtn_GetStyle(owner.hPointer);
		}
		_set = function( v ){
			return ::Xcgui.XBtn_SetStyle(owner.hPointer,v);
		} 	
	};
	text = {
		_get = function(){ 
			var sb = ..string.builder(200)  
			return  sb.fromUnicode( ::Xcgui.XBtn_GetText(owner.hPointer,sb,100)  ) ;
		}
		_set = function( v ){
			::Xcgui.XBtn_SetText(owner.hPointer,v );
		} 				
	};
	align = {
		_get = function(){ 
			return  ::Xcgui.XBtn_GetTextAlign(owner.hPointer);
		}
		_set = function( v ){
			return ::Xcgui.XBtn_SetTextAlign(owner.hPointer,v);
		} 	
	};
	setOffset = function( x,y ){
		return ::Xcgui.XBtn_SetOffset(owner.hPointer,x,y); 	
	}
	setIcon = function( v,align ){
		var icon = ..xcgui.image(v);
		if(align) owner.setIconAlign(align);
		if(icon) return ::Xcgui.XBtn_SetIcon(owner.hPointer,icon); 
	};
	setDisabledIcon  = function( v ){
		var icon = ..xcgui.image(v);
		if(icon) return ::Xcgui.XBtn_SetIconDisable(owner.hPointer,icon); 	
	};
	setIconAlign = function( v ){
		return ::Xcgui.XBtn_SetIconAlign(owner.hPointer,iconAlign[v]:v); 	
	};
 	setIconOffset = function( x,y ){
		return ::Xcgui.XBtn_SetOffsetIcon(owner.hPointer,x,y); 	
	}
	state = {
		_get = function(){ 
			return  ::Xcgui.XBtn_GetState(owner.hPointer);
		}
		_set = function( v ){
			return ::Xcgui.XBtn_SetState(owner.hPointer,v);
		} 	
	}
	checked = {
		_get = function(){ 
			return  ::Xcgui.XBtn_IsCheck(owner.hPointer);
		}
		_set = function( v ){
			return ::Xcgui.XBtn_SetCheck(owner.hPointer,v);
		} 	
	}
	
	iconAlign = {
		left = 0;
		top = 1;
		right = 2;
		bottom = 3;
	}
)


/**intellisense()
xcgui.ctrl.button(.(父窗口,参数表) = 创建一个按钮
xcgui.ctrl.radiobutton(.(父窗口,参数表) = 创建一个单选按钮
xcgui.ctrl.checkbox(.(父窗口,参数表) = 创建一个复选按钮
xcgui.ctrl.closebutton(.(父窗口,参数表) = 创建一个关闭窗口按钮
xcgui.ctrl.minbutton(.(父窗口,参数表) = 创建一个最小化窗口按钮
xcgui.ctrl.maxbutton(.(父窗口,参数表) = 创建一个最大化窗口按钮
xcgui.ctrl.button() = !stdxcbutton.
win.ui.ctrl.xcbutton() = !stdxcbutton.
win.ui.ctrl.xcradiobutton() = !stdxcbutton.
win.ui.ctrl.xccheckbox() = !stdxcbutton.
win.ui.ctrl.xcclosebutton() = !stdxcbutton.
win.ui.ctrl.minbutton() = !stdxcbutton.
win.ui.ctrl.maxbutton() = !stdxcbutton.
end intellisense**/

/**intellisense(!stdxcbutton)
group =  分组\n同一分组的单选按钮同时仅有一个可以是选中状态
type = 类型
style = 样式
text = 文本
align = 对齐
setOffset( x,y ) = 文本偏移
setIcon( __ ) = 设置前景图，直接指定png格式图像路径即可\n可选用参数@2设置图标对齐,可选值分别为"left","top","right","bottom"
setDisabledIcon( __ ) = 设置禁用状态图标
setIconAlign( "__" )= 设置图标对齐,可选值分别为"left","top","right","bottom"
setIconOffset( x,y ) = 文本偏移
state = 状态
checked = 是否选中
background = 获取控件的背景管理器\n!stdxcbkmanager.
bkAddFill(.("状态",图像,颜色数值或RGB分量) = 设置控件填充颜色\n可用的背景状态请查看xcgui.state
bkAddBorder(.("状态",线宽,透明度,RGB颜色) = 添加背景边框\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddImage( = 添加背景内容图片\n注意相同路径的图像会自动缓存,不会重复创建相同图像\n所以不应在参数@2中应传入文件路径,而非文件数据
bkAddImage(.(状态,图像) = 添加背景内容图片,参数为xcgui.image对象,也可以直接指定图片路径\n状态参数使用字符串表述,可用值参考xcgui.state库源码
bkAddImage(.(状态,文件路径,绘制类型) = 创建图像,支持资源路径,拉伸参数可选 - 默认值为true\n状态参数使用字符串表述,可用值参考xcgui.state库源码\n绘制类型为字符串值，参考xcgui.image.repeat
bkAddImage(.(状态,文件路径,"expand",左,上,右,下) = 创建九宫格图像,支持资源路径\n状态参数使用字符串表述,可用值参考xcgui.state库源码
bkAddImage(.(状态,文件路径,是否位伸,左,上,宽,高) = 加载图片上指定的部分\n状态参数使用字符串表述,可用值参考xcgui.state库源码
skin(样式配置) = @.skin(\n	background = { \n		hover = "\image\button_hover.png";\n		active = "\image\button_down.png";\n		leave = "\image\button_leave.png"; \n	}\n)
id = ID值
z = Z序
topmost(true) = Z序置顶
getWindow() = 返回父窗体\n!stdxcwnd
hitEle(.(x,y) = 根据指定的坐标获取子节点\n!stdxcele
getParent() = 获取父节点\n!stdxcele
getParentHandle() = 获取父节点句柄
getParentType() = 获取父节点类型
getObjectType() = 获取节点类型
addEle(__) = 添加子节点
insertEle(.(child,index) = 在index指定的位置插入子节点child 
remove() = 移除元素,但不销毁.
disabled = 是否禁用
hide = 是否隐藏;
pointerEvents = 是否触发鼠标事件\n值设为false可实现鼠标穿透效果
transparent = 是否支持背景透明\n透明PNG图像需要设置此属性为true
alpha = 透明度
color = 字体颜色
border = 设置是否允许显示边框\n只写属性
focusBorderColor = 焦点边框颜色
enableDrawFocus = 是否允许绘制焦点
focusBorder = 是否启用焦点
scrollView = 是否允许显示滚动
tabstop = 是否允许键盘切换焦点
tooltip = 提示文本
css("__") = 修改CSS样式名\n无参数时返回CSS样式名
popupToolTip(.(x,y) = 在指定坐标弹出提示
getFont() = 获取字体\n!stdxcfont.
setFont(.(字体名,字体大小,样式) = 创建字体
setFont(.(字体名） = 设置字体
setFont(.(name="字体"） = 设置字体\n参数为LOGFONT对象，或指定部分LOGFONT属性的表
setFont(.(句柄） = 设置字体\n参数为字体句柄
getClientRect() = 返回客户区区块,::RECT对象\n!rect. 
getRect = 返回控件区块,::RECT对象\n!rect. 
setRect(.(rect,是否重绘) = 设置区块,参数@1为::RECT对象
getLogicRect = 返回控件逻辑区块,::RECT对象\n!rect. 
setLogicRect(.(rect,是否重绘) = 设置控件逻辑区块,参数@1为::RECT对象
setPos(.(x坐标,y坐标,宽,高) = 调整控件位置或排序,所有参数可选\n同时指定x,y坐标则移动位置\n同时指定宽高则改变大小
getPos() = 返回相对坐标,宽,高,返回4个值：x,y,cx,cy
autoResize = 是否允许aardio窗口自动调整控件位置\n只有在窗口设计器中添加的控件,并是aardio窗口对象的成员时此属性才有效
getWidth() = 获取宽度
getHeight() = 获取高度
layoutObject = 获取或绑定布局对象\n获取布局对象时如果布局对象不存在则自动创建\n!stdxclayoutObj.
getParentLayoutObject() = 获取父布局对象
adjustLayoutObject() = 调整布局对象
adjustLayout() = 调整布局
setLayoutHeight(.(宽度,选项) = 设置布局宽度
setLayoutWidth(.(高度,选项) = 设置布局高度 
cursor = 鼠标指针
redraw() = 重绘
redrawRect(__) = 重绘区块,参数为::RECT对象
close() = 销毁控件
post("click__",wParam,lParam) = 发送消息,不获取返回值\n参数@1可使用任何字符串自定义新的消息
send("click__",wParam,lParam) = 发送消息,获取消息处理函数的返回值\n任何一个事件回调函数返回非null值都会结束当次事件并返回该值,\n参数@1可使用任何字符串自定义新的消息
.onMessage= @.on("message",function(message,wParam,lParam){
	if( message == "自定义消息" ) return __/*返回非null值结束本次回调*/;
})
.onClick = @.on("click",function(){
	__
})
.onCheck = @.on("check",function(checked){
	__
})
.onPaint = @.on("paint",function(hDraw){
	__
})
.onPaintEnd = @.on("paintEnd",function(hDraw){
	__
})
.onPaintScrollView = @.on("paintScrollView",function(hDraw){

})
.onMove = @.on("move",function(nFlags,pt){
	
	__
})
.onEnter = @.on("enter",function(){

})
.onHover = @.on("hover",function(nFlags, pt){
	
	__
})
.onLeave = @.on("leave",function(hEleHover){

})
.onWheel = @.on("wheel",function(nFlags,pt){
	
	__
})
.onLbuttonDown = @.on("lbuttonDown",function(nFlags, pt){
	
	__
})
.onLbuttonUp = @.on("lbuttonUp",function(nFlags, pt){
	
	__
})
.onRbuttonDown = @.on("rbuttonDown",function(nFlags, pt){
	
	__
})
.onRbuttonUp = @.on("rbuttonUp",function(nFlags, pt){
	
	__
})
.onDblclick = @.on("dblclick",function(nFlags, pt){
	
	__
})
.onFocus = @.on("focus",function(){
	__
})
.onKillFocus = @.on("killFocus",function(){
	__
})
.onDestroy = @.on("destroy",function(){
	__
})
.onSize = @.on("size",function(){
	__
})
.onShow = @.on("show",function(shown){
	__
})
.onSetFont = @.on("font",function(){
	__
})
.onKeyDown = @.on("keyDown",function(wParam,lParam){
	__
})
.onChar = @.on("char",function(wParam,lParam){
	__
})
.onSetCapture = @.on("setCapture",function(){
	__
})
.onKillCapture = @.on("killCapture",function(){
	__
})
.onCursor = @.on("cursor",function(wParam,lParam){
	__
})
.onDropfiles = @.on("dropfiles",function(wParam){
	var files = ..win.getDropFile(wParam) __
})
.onMenuPopup = @.on("menuPopup",function(hMenu){
	__
})
.onMenuPopupWnd = @.on("menuPopupWnd",function(hMenu,pInfo){
	__
})
.onMenuSelect = @.on("menuSelect",function(id){
	__
})
.onMenuDrawBackground = @.on("menuDrawBackground",function(hDraw,pInfo){
	__
})
.onMenuDrawitem = @.on("menuDrawitem",function(hDraw,pInfo){
	__
})
.onMenuExit = @.on("menuExit",function(){
	__
})
end intellisense**/
