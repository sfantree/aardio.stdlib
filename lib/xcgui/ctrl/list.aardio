//list 列表
import xcgui.ctrl.metaProperty;
namespace xcgui.ctrl;

class list{

	ctor(hParentPointer,tParam){ 
		if(! (hParentPointer || tParam) ) return null;
		if(type(tParam)!=type.table){
			this.hPointer = topointer( hParentPointer);
		}
		else {
			if( tParam.resource ) ..xcgui.res.load(tParam.resource);
			if(tParam.layout){
				var hEle = ..xcgui.loadLayout(tParam.layout,hParentPointer);
				if( ::Xcgui.XC_IsHELE (hEle) ){ 
					if( ::Xcgui.XEle_GetType(hEle) != 0x1B/*_XC_LIST*/) return null; 
					::Xcgui.XEle_AdjustLayoutObject(hEle);
					this.hPointer = topointer(hEle);
				}
				else {
					return null;
				}
			}
			else {
				this.hPointer = topointer( ::Xcgui.XList_Create(tParam.left,tParam.top,tParam.right-tParam.left,tParam.bottom-tParam.top,hParentPointer) );	
			}	
		}
		this@ = _metaProperty;
		this.loadTemplate($"~\lib\xcgui\.res\List_Item.xml");
	};
}

var xcguistate = assert(..xcgui.state);
list._metaProperty = metaProperty(
	addColumn = function(width){
		return ::Xcgui.XList_AddColumn(owner.hPointer,width);
	}
	insertColumn = function(width,item){
		return ::Xcgui.XList_InsertColumn(owner.hPointer,width,item);
	}
	deleteColumn = function(item){
		return ::Xcgui.XList_DeleteColumn(owner.hPointer,item);
	}
	clearColumn = function(){
		return ::Xcgui.XList_DeleteColumnAll(owner.hPointer);
	}
	enableMultiSel = function(bEnable){
		return ::Xcgui.XList_EnableMultiSel(owner.hPointer,bEnable);
	}
	enableDragChangeColumnWidth = function(bEnable){
		return ::Xcgui.XList_EnableDragChangeColumnWidth(owner.hPointer,bEnable);
	}
	enableVScrollBarTop = function(bTop){
		return ::Xcgui.XList_EnableVScrollBarTop(owner.hPointer,bTop);
	}
	enableItemBkFullRow = function(bFull){
		return ::Xcgui.XList_EnableItemBkFullRow(owner.hPointer,bFull);
	}
	setSort = function(iColumn,iColumnAdapter,bEnable){
		return ::Xcgui.XList_SetSort(owner.hPointer,iColumn,iColumnAdapter,bEnable);
	}
	setDrawItemBkFlags = function(nFlags){
		return ::Xcgui.XList_SetDrawItemBkFlags(owner.hPointer,nFlags);
	}
	setColumnWidth = function(item,width){
		return ::Xcgui.XList_SetColumnWidth(owner.hPointer,item,width);
	}
	setColumnMinWidth = function(item,width){
		return ::Xcgui.XList_SetColumnMinWidth(owner.hPointer,item,width);
	}
	setColumnWidthFixed = function(iColumn,bFixed){
		return ::Xcgui.XList_SetColumnWidthFixed(owner.hPointer,iColumn,bFixed);
	}
	getColumnWidth = function(iColumn){
		return ::Xcgui.XList_GetColumnWidth(owner.hPointer,iColumn);
	}
	columnCount = function(){
		return ::Xcgui.XList_GetColumnCount(owner.hPointer);
	}
	setItemData = function(item,iSubItem,data){
		return ::Xcgui.XList_SetItemData(owner.hPointer,item,iSubItem,data);
	}
	getItemData = function(item,iSubItem){
		return ::Xcgui.XList_GetItemData(owner.hPointer,item,iSubItem);
	}
	selected = {
		_set = function(item){
			return ::Xcgui.XList_SetSelectItem(owner.hPointer,item);
		}
		_get = function(){
			return ::Xcgui.XList_GetSelectItem(owner.hPointer);
		}
	}
	selectAll = function(){
		return ::Xcgui.XList_SetSelectAll(owner.hPointer);
	}
	getSelectionCount = function(){
		return ::Xcgui.XList_GetSelectItemCount(owner.hPointer);
	}
	getSelections = function(){
		var size = owner.getSelectionCount();
		if(!size) return;
		
		var array ={ int items[] = {length=size}}
		size = ::Xcgui.XList_GetSelectAll(owner.hPointer,array,size);
		return ..table.slice(array.items,1,size);
	}
	deselect = function(item){
		return ::Xcgui.XList_CancelSelectItem(owner.hPointer,item);
	}
	deselectAll = function(){
		return ::Xcgui.XList_CancelSelectAll(owner.hPointer);
	}
	getHeader = function(){
		return ..xcgui.ctrl.ele( ::Xcgui.XList_GetHeaderHELE(owner.hPointer) );
	}
	loadTemplate = function(path){
		if( #path < 0x410/*_MAX_PATH_U8*/  ){
			if ..io.exist(path) return ::Xcgui.XList_SetItemTemplateXML(owner.hPointer,..io.fullpath(path));
			path = ..string.loadBuffer(path) : path;
		}
		return ::Xcgui.XList_SetItemTemplateXMLFromStringA(owner.hPointer,path);
	}
	getTemplateObject = function(item,nTempItemID){
		return ::Xcgui.XList_GetTemplateObject(owner.hPointer,item,nTempItemID);
	}
	getItemIndex = function(hXCGUI){
		return ::Xcgui.XList_GetItemIndexFromHXCGUI(owner.hPointer,hXCGUI);
	}
	getHeaderTemplateObject = function(item,nTempItemID){
		return ::Xcgui.XList_GetHeaderTemplateObject(owner.hPointer,item,nTempItemID);
	}
	getHeaderItemIndex = function(hXCGUI){
		return ::Xcgui.XList_GetHeaderItemIndexFromHXCGUI(owner.hPointer,hXCGUI);
	}
	bkAddItemBorder = function(state,width,alpha,color,g,b){
		if(b!==null) color = ..gdi.RGB(color,g,b);
		return ::Xcgui.XList_AddItemBkBorder(owner.hPointer,xcguistate[state] : state,color,alpha,width);
	}
	bkAddItemFill = function(state,alpha,color,g,b){
		if(b!==null) color = ..gdi.RGB(color,g,b)
		return ::Xcgui.XList_AddItemBkFill(owner.hPointer,xcguistate[state] : state,color,alpha);
	}
	bkAddItemImage = function(nState,image){
		if(type(image) == type.string) image = ..xcgui.image(image,repeat,top,right,bottom);
		return ::Xcgui.XList_AddItemBkImage(owner.hPointer,xcguistate[state] : state,image);
	}
	bkItemInfoCount = function(){
		return ::Xcgui.XList_GetItemBkInfoCount(owner.hPointer);
	}
	bkItemInfoClear = function(){
		return ::Xcgui.XList_ClearItemBkInfo(owner.hPointer);
	}
	setItemHeight = function(height,selHeight){
		return ::Xcgui.XList_SetItemHeightDefault(owner.hPointer,height,selHeight);
	}
	getItemHeight = function(pHeight,pSelHeight){
		var height,selHeight = {int value},{int value};
		::Xcgui.XList_GetItemHeightDefault(owner.hPointer,height,selHeight);
		return height.value,selHeight.value;
	}
	hitTest = function(x,y){
		var item,subItem = {int value},{int value};
		if( ::Xcgui.XList_HitTest(owner.hPointer,::POINT(x,y),item,subItem) )
			return item.value,subItem.value;
	}
	hitTestOffset = function(x,y){
		var item,subItem = {int value},{int value};
		if( ::Xcgui.XList_HitTestOffset(owner.hPointer,::POINT(x,y),item,subItem) )
			return item.value,subItem.value;
	}
	headerHeight = {
		_set = function(v){
			 ::Xcgui.XList_SetHeaderHeight(owner.hPointer,v);
		}
		_get = function(){
			return ::Xcgui.XList_GetHeaderHeight(owner.hPointer);
		}
	}
	rowSpace = {
		_set = function(v){
			 ::Xcgui.XList_SetRowSpace(owner.hPointer,v);
		}
		_get = function(){
			return ::Xcgui.XList_GetRowSpace(owner.hPointer);
		}
	}
	createAdapter = function(){
		owner[["(adapter)"]] = ..xcgui.adapter.table( ::Xcgui.XList_CreateAdapter(owner.hPointer) );
		return owner[["(adapter)"]];
	}
	adapter = {
		_set = function(v){
			owner[["(adapter)"]] = v;
			 ::Xcgui.XList_BindAdapter(owner.hPointer,v);
		}
		_get = function(){
			if( owner[["(adapter)"]] ) return owner[["(adapter)"]];
			var ad = ..xcgui.adapter.table( ::Xcgui.XList_GetAdapter(owner.hPointer) );
			owner[["(adapter)"]] =  ad or owner.createAdapter();
			return owner[["(adapter)"]];
		}
	}
	headerAdapter = {
		_set = function(v){
			owner[["(headerAdapter)"]] = v;
			 ::Xcgui.XList_BindAdapterHeader(owner.hPointer,v);
		}
		_get = function(){
			if( owner[["(headerAdapter)"]] ) return owner[["(headerAdapter)"]];
			var ad = ..xcgui.adapter.map( ::Xcgui.XList_GetAdapterHeader(owner.hPointer) );
			owner[["(headerAdapter)"]] =  ad or owner.createAdapterHeader();
			return owner[["(headerAdapter)"]];
		}
	}
	createAdapterHeader = function(){
		owner[["(headerAdapter)"]] = ..xcgui.adapter.map( ::Xcgui.XList_CreateAdapterHeader(owner.hPointer) );
		return owner[["(headerAdapter)"]];
	}
	refreshData = function(){
		return ::Xcgui.XList_RefreshData(owner.hPointer);
	}
	refreshItem = function(item){
		return ::Xcgui.XList_RefreshItem(owner.hPointer,item);
	}
	sort = function(column,bAscending){
		return owner.adapter.sort(column,bAscending)
	}
	getDataType = function(item,column){
		return owner.adapter.getDataType(item,column)
	}
	getFieldDataType = function(item,fieldName){
		return owner.adapter.getFieldDataType(item,fieldName)
	}
	addField = function(fieldName){
		return owner.adapter.addField(fieldName)
	}
	setField = function(fieldName){
		return owner.adapter.setField(fieldName)
	}
	addString = function(value){
		return owner.adapter.addString(value)
	}
	addFieldString = function(fieldName,value){
		return owner.adapter.addFieldString(fieldName,value)
	}
	addImage = function(image,repeat,top,right,bottom){
		return owner.adapter.addImage(image,repeat,top,right,bottom)
	}
	addFieldImage = function(fieldName,image,repeat,top,right,bottom){
		return owner.adapter.addFieldImage(fieldName,image,repeat,top,right,bottom)
	}
	insertString = function(item,value){
		return owner.adapter.insertString(item,value)
	}
	insertFieldString = function(item,fieldName,value){
		return owner.adapter.insertFieldString(item,fieldName,value)
	}
	insertImage = function(item,image,repeat,top,right,bottom){
		return owner.adapter.insertImage(item,image,repeat,top,right,bottom)
	}
	insertFieldImage = function(item,fieldName,image,repeat,top,right,bottom){
		return owner.adapter.insertFieldImage(item,fieldName,image,repeat,top,right,bottom)
	}
	setString = function(item,column,value){
		return owner.adapter.setString(item,column,value)
	}
	setFieldString = function(item,fieldName,value){
		return owner.adapter.setFieldString(item,fieldName,value)
	}
	setInt = function(item,column,value){
		return owner.adapter.setInt(item,column,value)
	}
	setFieldInt = function(item,fieldName,value){
		return owner.adapter.setFieldInt(item,fieldName,value)
	}
	setFloat = function(item,column,value){
		return owner.adapter.setFloat(item,column,value)
	}
	setFieldFloat = function(item,fieldName,value){
		return owner.adapter.setFieldFloat(item,fieldName,value)
	}
	setImage = function(item,column,image,repeat,left,top,right,bottom){
		return owner.adapter.setImage(item,column,image,repeat,left,top,right,bottom)
	}
	setFieldImage = function(item,fieldName,image){
		return owner.adapter.setFieldImage(item,fieldName,image)
	}
	delete = function(item){
		return owner.adapter.delete(item)
	}
	deleteEx = function(item,nCount){
		return owner.adapter.deleteEx(item,nCount)
	}
	clear = function(){
		return owner.adapter.clear()
	}
	clearField = function(){
		return owner.adapter.clearField()
	}
	count = function(){
		return owner.adapter.count()
	}
	fieldCount = function(){
		return owner.adapter.fieldCount()
	}
	getString = function(item,column){
		return owner.adapter.getString(item,column)
	}
	getFieldString = function(item,fieldName){
		return owner.adapter.getFieldString(item,fieldName)
	}
	getImage = function(item,column){
		return owner.adapter.getImage(item,column)
	}
	getFieldImage = function(item,fieldName){
		return owner.adapter.getFieldImage(item,fieldName)
	}
	getInt = function(item,column){
		return owner.adapter.getInt(item,column)
	}
	getFieldInt = function(item,fieldName){
		return owner.adapter.getFieldInt(item,fieldName)
	}
	getFloat = function(item,column){
		return owner.adapter.getFloat(item,column)
	}
	getFieldFloat = function(item,fieldName){
		return owner.adapter.getFieldFloat(item,fieldName)
	}
	headerAddString = function(pName,pValue){
		return owner.headerAdapter.addString(pName,pValue)
	}
	headerAddImage = function(pName,image,repeat,top,right,bottom){
		return owner.headerAdapter.addImage(pName,image,repeat,top,right,bottom)
	}
	headerDelete = function(pName){
		return owner.headerAdapter.delete(pName)
	}
	headerCount = function(){
		return owner.headerAdapter.count()
	}
	headerGetString = function(pName){
		return owner.headerAdapter.getString(pName)
	}
	headerGetImage = function(pName){
		return owner.headerAdapter.getImage(pName)
	}
	headerSetString = function(pName,pValue){
		return owner.headerAdapter.setString(pName,pValue)
	}
	headerSetImage = function(pName,hImage){
		return owner.headerAdapter.setImage(pName,hImage)
	}
)

/**intellisense()
xcgui.ctrl.list(.(父窗口,参数表) = 创建一个列表
xcgui.ctrl.list() = !stdxclist.
win.ui.ctrl.xclist() = !stdxclist.
end intellisense**/

/**intellisense(!stdxclist)
getScrollView() = 获取滚动视图接口\n!stdxcscrollview.
headerAdapter = 列表头数据适配器
adapter = 绑定数据适配器
createAdapter() = 创建数据适配器，根据绑定的项模板初始化数据适配器的列
createAdapterHeader() = 创建数据适配器，根据绑定的项模板初始化数据适配器的列
headerAddString(.(pName,pValue) = 增加数据项
headerAddImage(.(pName,hImage) = 增加数据项
headerGetImage(.(pName) = 获取项图像数据
headerGetImage(） = !stdxcimage.
headerSetImage(.(pName,hImage) = 设置项内容
headerDelete(.(pName) = 删除数据项
headerCount() = 获取项数量
headerGetString(.(pName,pOut,nOutLen) = 获取项内容,如果内容为文本
headerSetString(.(pName,pValue) = 设置项内容
sort(.(column,bAscending) = 对内容进行排序
getDataType(.(item,column) = 获取项数据类型
getFieldDataType(.(item,fieldName) = 获取项数据类型
addField(__) = 添加数据列
setField(__) = 设置数据列
addString(__) = 添加数据项,默认值放到第一列
addFieldString(.(fieldName,value) = 添加数据项,填充指定列数据
addImage(__) = 添加数据项,默认值放到第一列
addFieldImage(.(fieldName,hImage) = 添加数据项,并填充指定列数据
insertString(.(item,value) = 插入数据项,填充第一列数据
insertFieldString(.(item,fieldName,value) = 插入数据项,并填充指定列数据
insertImage(.(item,hImage) = 插入数据项,填充第一列数据
insertFieldImage(.(item,fieldName,hImage) = 插入数据项,并填充指定列数据
setString(.(item,column,value) = 设置项数据
setFieldString(.(item,fieldName,value) = 设置项数据
setInt(.(item,column,value) = 设置项数据
setFieldInt(.(item,fieldName,value) = 设置项数据
setFloat(.(item,column,value) = 设置项数据
setFieldFloat(.(item,fieldName,value) = 设置项数据
setImage(.(item,column,hImage) = 设置项数据
setFieldImage(.(item,fieldName,hImage) = 设置项数据
delete(__) = 删除项
deleteEx(.(item,nCount) = 删除多个项
clear() = 删除所有项
clearField() = 删除所有列,并且清空所有数据
count() = 获取项数量
fieldCount() = 获取列数量
getString(.(item,column) = 获取项文本内容
getFieldString(.(item,fieldName) = 获取项文本内容
getImage(.(item,column) = 获取项图片句柄\n!stdxcimage.
getFieldImage(.(item,fieldName) = 获取项图片句柄\n!stdxcimage.
getImage() = !stdxcimage.
getFieldImage() = !stdxcimage.
getInt(.(item,column) = 获取项值
getFieldInt(.(item,fieldName) = 获取项值
getFloat(.(item,column) = 获取项值
getFieldFloat(.(item,fieldName) = 获取项值
addColumn(__) = 控件增加列
insertColumn(.(width,item) = 控件插入列
enableMultiSel(__) = 启用或关闭多选功能
enableDragChangeColumnWidth(__) = 启用拖动改变列宽度
enableVScrollBarTop(__) = 启用垂直滚动条顶部对齐
enableItemBkFullRow(__) = 启用项背景全行填充模式
setSort(.(iColumn,iColumnAdapter,bEnable) = 设置排序属性
setDrawItemBkFlags(__) = 设置是否绘制指定状态下项的背景
setColumnWidth(.(item,width) = 设置列宽度
setColumnMinWidth(.(item,width) = 设置列最小宽度
setColumnWidthFixed(.(iColumn,bFixed) = 设置指定列宽度固定
getColumnWidth(__) = 获取指定列宽度
columnCount() = 获取列数量
setItemData(.(item,iSubItem,data) = 设置项用户数据
getItemData(.(item,iSubItem) = 获取项用户数据
selected = 当前选择项索引.
getSelectionCount() = 获取选择项数量
selectAll() = 选择全部行
getSelections() = 获取全部选择的行
deselect(__) = 取消选择指定项(这里的项可以理解为行)
deselectAll() = 取消选择所有项(这里的项可以理解为行)
getHeader() = 获取列表头元素
deleteColumn(__) = 删除列
clearColumn() = 删除所有的列
loadTemplate(__) = 设置列表项模板文件\n参数支持文件路径、资源路径、或内存数据
getTemplateObject(.(item,nTempItemID) = 通过模板项ID,获取实例化模板项ID对应的对象句柄
getItemIndex(__) = 获取当前对象所在模板实例,属于列表中哪一个项
getHeaderTemplateObject(.(item,nTempItemID) = 列表头,通过模板项ID,获取实例化模板项ID对应的对象句柄
getHeaderItemIndex(__) = 列表头,获取当前对象所在模板实例,属于列表头中哪一个项
headerHeight = 设置列表头高度
bkAddItemBorder(.(状态,线宽,透明度,RGB颜色) = 添加项背景内容边框\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemBorder(.(状态,线宽,透明度,R,G,B) = 添加项背景内容边框\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemFill(.(状态,透明度,RGB颜色) = 添加项背景内容填充\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemFill(.(状态,透明度,R,G,B) = 添加项背景内容填充\n状态可以是字符串或数值,可用值参考xucgui.state
bkAddItemImage(.(状态,图像) = 添加项背景内容图片,参数为xcgui.image对象
bkItemInfoCount() = 获取项背景内容数目
bkItemInfoClear() = 清除项背景内容
setItemHeight(.(nHeight,nSelHeight) = 设置项默认高度
getItemHeight(.(pHeight,pSelHeight) = 获取项默认高度
rowSpace  = 行间距
hitTest(.(pPt,piItem,piSubItem) = 检测坐标点所在项
hitTestOffset(.(pPt,piItem,piSubItem) = 检查坐标点所在项,自动添加滚动视图偏移量
refreshData() = 刷新数据
refreshItem(__) = 刷新指定项模板,以便更新UI
background = 获取控件的背景管理器\n!stdxcbkmanager.
bkAddFill(.("状态",图像,颜色数值或RGB分量) = 设置控件填充颜色\n可用的背景状态请查看xcgui.state
bkAddImage(.("状态",图像) = 设置窗口顶部图像\n图像可直接指定路径或资源路径,也可使用xcgui.image对象
bkAddBorder(.("状态",线宽,透明度,RGB颜色) = 添加背景边框\n状态可以是字符串或数值,可用值参考xucgui.state
id = ID值
z = Z序
topmost(true) = Z序置顶
getWindow() = 返回父窗体\n!stdxcwnd
hitEle(.(x,y) = 根据指定的坐标获取子节点\n!stdxcele
getParent() = 获取父节点\n!stdxcele
getParentHandle() = 获取父节点句柄
getParentType() = 获取父节点类型
getObjectType() = 获取节点类型
addEle(__) = 添加子节点
insertEle(.(child,index) = 在index指定的位置插入子节点child 
remove() = 移除元素,但不销毁.
disabled = 是否禁用
hide = 是否隐藏;
pointerEvents = 是否触发鼠标事件\n值设为false可实现鼠标穿透效果
transparent = 是否支持背景透明\n透明PNG图像需要设置此属性为true
alpha = 透明度
color = 字体颜色
border = 设置是否允许显示边框\n只写属性
focusBorderColor = 焦点边框颜色
enableDrawFocus = 是否允许绘制焦点
focusBorder = 是否启用焦点
scrollView = 是否允许显示滚动
tabstop = 是否允许键盘切换焦点
tooltip = 提示文本
css("__") = 修改CSS样式名\n无参数时返回CSS样式名
popupToolTip(.(x,y) = 在指定坐标弹出提示
getFont() = 获取字体\n!stdxcfont.
setFont(.(字体名,字体大小,样式) = 创建字体
setFont(.(字体名） = 设置字体
setFont(.(name="字体"） = 设置字体\n参数为LOGFONT对象，或指定部分LOGFONT属性的表
setFont(.(句柄） = 设置字体\n参数为字体句柄
getClientRect() = 返回客户区区块,::RECT对象\n!rect. 
getRect = 返回控件区块,::RECT对象\n!rect. 
setRect(.(rect,是否重绘) = 设置区块,参数@1为::RECT对象
getLogicRect = 返回控件逻辑区块,::RECT对象\n!rect. 
setLogicRect(.(rect,是否重绘) = 设置控件逻辑区块,参数@1为::RECT对象
setPos(.(x坐标,y坐标,宽,高) = 调整控件位置或排序,所有参数可选\n同时指定x,y坐标则移动位置\n同时指定宽高则改变大小
getPos() = 返回相对坐标,宽,高,返回4个值：x,y,cx,cy
autoResize = 是否允许aardio窗口自动调整控件位置\n只有在窗口设计器中添加的控件,并是aardio窗口对象的成员时此属性才有效
getWidth() = 获取宽度
getHeight() = 获取高度
layoutObject = 获取或绑定布局对象\n获取布局对象时如果布局对象不存在则自动创建\n!stdxclayoutObj.
getParentLayoutObject() = 获取父布局对象
adjustLayoutObject() = 调整布局对象
adjustLayout() = 调整布局
setLayoutHeight(.(宽度,选项) = 设置布局宽度
setLayoutWidth(.(高度,选项) = 设置布局高度 
cursor = 鼠标指针
redraw() = 重绘
redrawRect(__) = 重绘区块,参数为::RECT对象
close() = 销毁控件
post("click__",wParam,lParam) = 发送消息,不获取返回值\n参数@1可使用任何字符串自定义新的控件消息
send("click__",wParam,lParam) = 发送消息,获取消息处理函数的返回值\n任何一个事件回调函数返回非null值都会结束当次事件并返回该值,\n参数@1可使用任何字符串自定义新的控件消息
.onMessage= @.on("message",function(message,wParam,lParam){
	if( message == "自定义消息" ) return __/*返回非null值结束本次回调*/;
})
.onTempCreate = @.on("listTempCreate",function(pItem){
	__
})
.onTempCreateEnd = @.on("listTempCreateEnd",function(pItem){
	__
})
.onTempDestroy = @.on("listTempDestroy",function(pItem){
	__
})
.onTempAdjustCoordinate = @.on("listTempAdjustCoordinate",function(pItem){
	__
})
.onDrawitem = @.on("listDrawitem",function(hDraw,pItem){
	__
})
.onSelect = @.on("listSelect",function(item){
	__
})
.onHeaderDrawitem = @.on("listHeaderDrawitem",function(hDraw, pItem){
	__
})
.onHeaderClick = @.on("listHeaderClick",function(item){
	__
})
.onHeaderWidthChange = @.on("listHeaderWidthChange",function(item, nWidth ){
	__
})
.onHeaderTempCreate = @.on("listHeaderTempCreate",function(pItem){
	__
})
.onHeaderTempCreateEnd = @.on("listHeaderTempCreateEnd",function(pItem){
	__
})
.onHeaderTempDestroy = @.on("listHeaderTempDestroy",function(pItem){
	__
})
.onHeaderTempAdjustCoordinate = @.on("listHeaderTempAdjustCoordinate",function(pItem){
	__
})
.onPaint = @.on("paint",function(hDraw){
	__
})
.onPaintEnd = @.on("paintEnd",function(hDraw){
	__
})
.onPaintScrollView = @.on("paintScrollView",function(hDraw){

})
.onMove = @.on("move",function(nFlags,pt){
	
	__
})
.onEnter = @.on("enter",function(){

})
.onHover = @.on("hover",function(nFlags, pt){
	
	__
})
.onLeave = @.on("leave",function(hEleHover){

})
.onWheel = @.on("wheel",function(nFlags,pt){
	
	__
})
.onLbuttonDown = @.on("lbuttonDown",function(nFlags, pt){
	
	__
})
.onLbuttonUp = @.on("lbuttonUp",function(nFlags, pt){
	
	__
})
.onRbuttonDown = @.on("rbuttonDown",function(nFlags, pt){
	
	__
})
.onRbuttonUp = @.on("rbuttonUp",function(nFlags, pt){
	
	__
})
.onDblclick = @.on("dblclick",function(nFlags, pt){
	
	__
})
.onFocus = @.on("focus",function(){
	__
})
.onKillFocus = @.on("killFocus",function(){
	__
})
.onDestroy = @.on("destroy",function(){
	__
})
.onSize = @.on("size",function(){
	__
})
.onShow = @.on("show",function(shown){
	__
})
.onSetFont = @.on("font",function(){
	__
})
.onKeyDown = @.on("keyDown",function(wParam,lParam){
	__
})
.onChar = @.on("char",function(wParam,lParam){
	__
})
.onSetCapture = @.on("setCapture",function(){
	__
})
.onKillCapture = @.on("killCapture",function(){
	__
})
.onCursor = @.on("cursor",function(wParam,lParam){
	__
})
.onDropfiles = @.on("dropfiles",function(wParam){
	var files = ..win.getDropFile(wParam) __
})
.onMenuPopup = @.on("menuPopup",function(hMenu){
	__
})
.onMenuPopupWnd = @.on("menuPopupWnd",function(hMenu,pInfo){
	__
})
.onMenuSelect = @.on("menuSelect",function(id){
	__
})
.onMenuDrawBackground = @.on("menuDrawBackground",function(hDraw,pInfo){
	__
})
.onMenuDrawitem = @.on("menuDrawitem",function(hDraw,pInfo){
	__
})
.onMenuExit = @.on("menuExit",function(){
	__
})
end intellisense**/
