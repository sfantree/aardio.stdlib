//datetimepick 日期控件
import xcgui.ctrl.metaProperty;
namespace xcgui.ctrl;


class datetimepick{

	ctor(hParentPointer,tParam){ 
		if(! (hParentPointer || tParam) ) return null;
		if(type(tParam)!=type.table){
			this.hPointer = topointer( hParentPointer);
		}
		else {
			if( tParam.resource ) ..xcgui.res.load(tParam.resource);
			if(tParam.layout){
				var hEle = ..xcgui.loadLayout(tParam.layout,hParentPointer);
				if( ::Xcgui.XC_IsHELE (hEle) ){ 
					if( ::Xcgui.XEle_GetType(hEle) != 0x24/*_XC_DATETIME*/) return null; 
					::Xcgui.XEle_AdjustLayoutObject(hEle);
					this.hPointer = topointer(hEle);
				}
				else {
					return null;
				}
			}
			else {
				this.hPointer = topointer( ::Xcgui.XDateTime_Create(tParam.left,tParam.top,tParam.right-tParam.left,tParam.bottom-tParam.top,hParentPointer) );	
			}
		}
	};
	
	@_metaProperty;
	
}

datetimepick._metaProperty = metaProperty(

	style = {
		_set = function(nStyle){ 
			::Xcgui.XDateTime_SetStyle(owner.hPointer,nStyle);
		}
		_get = function(){ 
			return ::Xcgui.XDateTime_GetStyle(owner.hPointer);
		}
	}
	selBkColor = {
		_set = function(nStyle){ 
			::Xcgui.XDateTime_SetSelBkColor(owner.hPointer,v & 0xFFFFFF,v>> 24 & 0xFF);
		}
		_get = function(){ 
			return ::Xcgui.XDateTime_GetSelBkColor(owner.hPointer);
		}
	}
	getButton = function(nType){
		return ..xcgui.ctrl.button( topointer( ::Xcgui.XDateTime_GetButton(owner.hPointer,nType) ) );
	}
	getDate = function(){
		var year,month,day = {int value},{int value},{int value}
		::Xcgui.XDateTime_GetDate(owner.hPointer,year,month,day);
		return year.value,month.value,day.value;
	}
	setDate = function(year,month,day){
		::Xcgui.XDateTime_SetDate(owner.hPointer,year,month,day);
	}
	getTime = function(){
		var h,m,s = {int value},{int value},{int value}
		::Xcgui.XDateTime_GetTime(owner.hPointer, h,m,s);
		return h.value,m.value,s.value;
	}
	setTime = function(h,m,s){
		::Xcgui.XDateTime_SetTime(owner.hPointer,h,m,s);
	}
	time = {
		_get = function(){  
			var tm = ..time();
			tm.year,tm.month,tm.day = owner.getDate();
			tm.hour,tm.minute,tm.second = owner.getTime();
			return tm; 
		}
		_set = function( tm ){ 
			if(! ..time.istime(v)) error("无效的time对象",2);
			owner.setDate( tm.year,tm.month,tm.day );
			owner.setTime( tm.hour,tm.minute,tm.second );
		} 	
	};
)


/**intellisense()
xcgui.ctrl.datetimepick(.(父窗口,参数表) = 创建一个日期控件
xcgui.ctrl.datetimepick() = !stdxcdatetimepick.
win.ui.ctrl.xcdatetimepick() = !stdxcdatetimepick.
end intellisense**/

/**intellisense(!stdxcdatetimepick)
style = 样式
selBkColor = 被选择文字的背景颜色.
getButton(__) = 获取内部按钮元素
getButton()  = !stdxcbutton. 
getDate() = 获取当前年,月,日
setDate(.(year,month,day) = 设置当前年,月,日
getTime() = 获取当前时,分,秒
setTime(.(h,m,s) = 设置当前时,分,秒
time = 获取或写入time对象\n读取或赋值time属性时更新控件值,修改个别字段不会更新控件值\n!time.
background = 获取控件的背景管理器\n!stdxcbkmanager.
bkAddFill(.("状态",图像,颜色数值或RGB分量) = 设置控件填充颜色\n可用的背景状态请查看xcgui.state
bkAddImage(.("状态",图像) = 设置窗口顶部图像\n图像可直接指定路径或资源路径,也可使用xcgui.image对象
bkAddBorder(.("状态",线宽,透明度,RGB颜色) = 添加背景边框\n状态可以是字符串或数值,可用值参考xucgui.state
id = ID值
z = Z序
topmost(true) = Z序置顶
getWindow() = 返回父窗体\n!stdxcwnd
hitEle(.(x,y) = 根据指定的坐标获取子节点\n!stdxcele
getParent() = 获取父节点\n!stdxcele
getParentHandle() = 获取父节点句柄
getParentType() = 获取父节点类型
getObjectType() = 获取节点类型
addEle(__) = 添加子节点
insertEle(.(child,index) = 在index指定的位置插入子节点child 
remove() = 移除元素,但不销毁.
disabled = 是否禁用
hide = 是否隐藏;
pointerEvents = 是否触发鼠标事件\n值设为false可实现鼠标穿透效果
transparent = 是否支持背景透明\n透明PNG图像需要设置此属性为true
alpha = 透明度
color = 字体颜色
border = 设置是否允许显示边框\n只写属性
focusBorderColor = 焦点边框颜色
enableDrawFocus = 是否允许绘制焦点
focusBorder = 是否启用焦点
scrollView = 是否允许显示滚动
tabstop = 是否允许键盘切换焦点
tooltip = 提示文本
css("__") = 修改CSS样式名\n无参数时返回CSS样式名
popupToolTip(.(x,y) = 在指定坐标弹出提示
getFont() = 获取字体\n!stdxcfont.
setFont(.(字体名,字体大小,样式) = 创建字体
setFont(.(字体名） = 设置字体
setFont(.(name="字体"） = 设置字体\n参数为LOGFONT对象，或指定部分LOGFONT属性的表
setFont(.(句柄） = 设置字体\n参数为字体句柄
getClientRect() = 返回客户区区块,::RECT对象\n!rect. 
getRect = 返回控件区块,::RECT对象\n!rect. 
setRect(.(rect,是否重绘) = 设置区块,参数@1为::RECT对象
getLogicRect = 返回控件逻辑区块,::RECT对象\n!rect. 
setLogicRect(.(rect,是否重绘) = 设置控件逻辑区块,参数@1为::RECT对象
setPos(.(x坐标,y坐标,宽,高) = 调整控件位置或排序,所有参数可选\n同时指定x,y坐标则移动位置\n同时指定宽高则改变大小
getPos() = 返回相对坐标,宽,高,返回4个值：x,y,cx,cy
autoResize = 是否允许aardio窗口自动调整控件位置\n只有在窗口设计器中添加的控件,并是aardio窗口对象的成员时此属性才有效
getWidth() = 获取宽度
getHeight() = 获取高度
layoutObject = 获取或绑定布局对象\n获取布局对象时如果布局对象不存在则自动创建\n!stdxclayoutObj.
getParentLayoutObject() = 获取父布局对象
adjustLayoutObject() = 调整布局对象
adjustLayout() = 调整布局
setLayoutHeight(.(宽度,选项) = 设置布局宽度
setLayoutWidth(.(高度,选项) = 设置布局高度 
cursor = 鼠标指针
redraw() = 重绘
redrawRect(__) = 重绘区块,参数为::RECT对象
close() = 销毁控件
post("click__",wParam,lParam) = 发送消息,不获取返回值\n参数@1可使用任何字符串自定义新的控件消息
send("click__",wParam,lParam) = 发送消息,获取消息处理函数的返回值\n任何一个事件回调函数返回非null值都会结束当次事件并返回该值,\n参数@1可使用任何字符串自定义新的控件消息

.onMessage= @.on("message",function(message,wParam,lParam){
	if( message == "自定义消息" ) return __/*返回非null值结束本次回调*/;
})
.onChange = @.on("datetimeChange",function(){
	__
})
.onPopupMonthcal = @.on("datetimePopupMonthcal",function(hMonthCalWnd,hMonthCal){
	__
})
.onExitMonthcal = @.on("datetimeExitMonthcal",function(hMonthCalWnd,hMonthCal){
	__
})
.onPaint = @.on("paint",function(hDraw){
	__
})
.onPaintEnd = @.on("paintEnd",function(hDraw){
	__
})
.onPaintScrollView = @.on("paintScrollView",function(hDraw){

})
.onMove = @.on("move",function(nFlags,pt){
	
	__
})
.onEnter = @.on("enter",function(){

})
.onHover = @.on("hover",function(nFlags, pt){
	
	__
})
.onLeave = @.on("leave",function(hEleHover){

})
.onWheel = @.on("wheel",function(nFlags,pt){
	
	__
})
.onLbuttonDown = @.on("lbuttonDown",function(nFlags, pt){
	
	__
})
.onLbuttonUp = @.on("lbuttonUp",function(nFlags, pt){
	
	__
})
.onRbuttonDown = @.on("rbuttonDown",function(nFlags, pt){
	
	__
})
.onRbuttonUp = @.on("rbuttonUp",function(nFlags, pt){
	
	__
})
.onDblclick = @.on("dblclick",function(nFlags, pt){
	
	__
})
.onFocus = @.on("focus",function(){
	__
})
.onKillFocus = @.on("killFocus",function(){
	__
})
.onDestroy = @.on("destroy",function(){
	__
})
.onSize = @.on("size",function(){
	__
})
.onShow = @.on("show",function(shown){
	__
})
.onSetFont = @.on("font",function(){
	__
})
.onKeyDown = @.on("keyDown",function(wParam,lParam){
	__
})
.onChar = @.on("char",function(wParam,lParam){
	__
})
.onSetCapture = @.on("setCapture",function(){
	__
})
.onKillCapture = @.on("killCapture",function(){
	__
})
.onCursor = @.on("cursor",function(wParam,lParam){
	__
})
.onDropfiles = @.on("dropfiles",function(wParam){
	var files = ..win.getDropFile(wParam) __
})
.onScrollHorz = @.on("scrollHorz",function(pos){
	__
})
.onScrollVert = @.on("scrollVert",function(pos){
	__
})
.onScrollbar = @.on("scrollbar",function(pos){
	__
})
end intellisense**/