import access;
import com.lite;
import util.metaProperty;

class reportX{
    ctor(winform){  
        var ocx = ..com.lite(_reportOcxPath)
        ocx.createEmbed(winform,"{A5DA6E97-1D4C-4708-B705-84A45716B4DD}") 
        this = winform._embedObject;
        this._ocx = ocx;
    }; 
    newReport = function(aColCount,aRowCount){
        return this._object.NewReport(aColCount,aRowCount);
    }
    openReport = function(aFileName){
        return this._object.OpenReport(..io.fullpath(aFileName));
    }
    saveReport = function(aFileName){
        return this._object.SaveReport(..io.fullpath(aFileName));
    }
    openString  = function(aReport,aCompression){
        return this._object.OpenString (aReport,aCompression);
    }
    saveString = function(aCompression){
        return this._object.SaveString(aCompression);
    }
    printSetup = function(){
        return this._object.PrintSetup();
    }
    printPreview = function(){
        return this._object.PrintPreview();
    }
    printSheet = function(aDialog){
        return this._object.PrintSheet(aDialog);
    }
    replace = function(aCol1,aRow1,aCol2,aRow2, aCaseSensitive,aWholeWords,aFindString,aReplaceString){
        return this._object.NewReport(aCol1,aRow1,aCol2,aRow2, aCaseSensitive,aWholeWords,aFindString,aReplaceString);
    }
    setCellSelectColor = function(aColor1,aColor2){
        return this._object.SetCellSelectColor(aColor1,aColor2);
    }
    validatePaint = function(){
        return this._object.ValidatePaint();
    }
    setCellBackColor = function(aCol,aRow,aBackColor){
        return this._object.SetCellBackColor(aCol,aRow,aBackColor);
    }
    setCellFontColor = function(aCol,aRow,aBackColor){
        return this._object.SetCellFontColor(aCol,aRow,aBackColor);
    }
    setCellFontStyle = function(aCol,aRow,aFontStyle,aStyleBool){
        return this._object.SetCellFontStyle(aCol,aRow,aFontStyle,aStyleBool);
    }
    setCellExpression = function(aCol,aRow,aExpression){
        return this._object.SetCellExpression(aCol,aRow,aExpression);
    }
    appendCol = function(aCount){
        return this._object.AppendCol(aCount);
    }
    appendRow = function(aCount){
        return this._object.AppendRow(aCount);
    }
    clearCell = function(aCol1,aRow1,aCol2,aRow2){
        return this._object.AppendRow(aCol1,aRow1,aCol2,aRow2);
    }
    clearData = function(aCol1,aRow1,aCol2,aRow2){
        return this._object.ClearData(aCol1,aRow1,aCol2,aRow2);
    }
    getInputCell = function(){
        return this._object.GetInputCell();
    }
    getSelectCell = function(){
        return this._object.GetSelectCell();
    }
    setSelectCell = function(aCol1,aRow1,aCol2,aRow2){
        return this._object.SetSelectCell(aCol1,aRow1,aCol2,aRow2);
    }
    mergeCell = function(aCol1,aRow1,aCol2,aRow2){
        return this._object.MergeCell(aCol1,aRow1,aCol2,aRow2);
    }
    mergeSelected = function(){
        return this.mergeCell(this.getSelectCell());
    } 
    setFrozenCol = function(aFrozenStart,aFrozenEnd){
        return this._object.SetFrozenCol(aFrozenStart,aFrozenEnd);
    }
    setFrozenRow = function(aFrozenStart,aFrozenEnd){
        return this._object.SetFrozenRow(aFrozenStart,aFrozenEnd);
    }
    setFrozenRow = function(aFrozenStart,aFrozenEnd){
        return this._object.SetFrozenRow(aFrozenStart,aFrozenEnd);
    }
    getCellValue = function(aCol,aRow){
        return this._object.GetCellValue(aCol,aRow);
    }
    setCellValue = function(aCol,aRow,aValue){
        return this._object.SetCellValue(aCol,aRow,aValue);
    }
    setCellFormat = function(aCol,aRow,aFormatType,aFormatText){
        return this._object.SetCellFormat(aCol,aRow,aFormatType,aFormatText);
    }
    setCellControl = function(aCol,aRow,aControlType){
        return this._object.SetCellControl(aCol,aRow,aControlType);
    }
    exportExcel = function(aFileName,aDisplayValue,aSheetName){
        return this._object.ExportExcel(..io.fullpath(aFileName),aSheetName : "Sheet1",aDisplayValue);
    }
    importExcel = function(aFileName,aOleText){
        if(aOleText===null) aOleText = true;
        var db,err = ..access( aFileName, {["Extended Properties"] = "Excel 8.0;HDR=No";}) 
        if(!db) return null,err;
        for(tbName,tbType,tbObj in db.eachTableObject() ){
            if( ( tbType=="TABLE") && ( tbName[#tbName]=='$'# ) ){
                var tb =  db.getTable("SELECT COUNT(*) AS c FROM [%s]",tbName); 
                
                if(tb){
                    this.newReport(tbObj.Columns.count,tb[1].c)
                    var row = 0;
                    for(rs in db.each("SELECT *  FROM ["+tbName+"]") ){ 
                        row =  row + 1;
                        for( i=1;rs.Fields.Count ){
                            this.setCellValue(i,row,rs(i-1).value); 
                        }
                    } 
                    db.close(); 
                    return true;
                }
            }
        }
        db.close();
    }
    importExcelOle = function(aFileName,aOleText,aCol1,aRow1,aCol2,aRow2){
        if(aOleText===null) aOleText = true;
        
        if( (aCol1 === null) || (aRow1 === null) || (aCol2 === null) || (aRow2 === null) ){
        	var db,err = ..access( aFileName, {["Extended Properties"] = "Excel 8.0;HDR=No";}) 
        	if(!db) return null,err;
        	
        	
        	for(tbName,tbType,tbObj in db.eachTableObject() ){
            	if( ( tbType=="TABLE") && ( tbName[#tbName]=='$'# ) ){
                	var tb =  db.getTable("SELECT COUNT(*) AS c FROM [%s]",tbName); 
                	var columns = tbObj.Columns.count;
                	if(tb){
                		db.close()
                    	return this._object.ImportExcelOle(..io.fullpath(aFileName),1,1,columns,tb[1].c,aOleText);
                	}
            	}
        	}
        	
        	db.close()
        }
        
        return this._object.ImportExcelOle(..io.fullpath(aFileName),aCol1,aRow1,aCol2,aRow2,aOleText);
    }
    openDatabaseGuide = function(){
        return this._object.OpenDatabaseGuide();
    }
    setTopPoleText = function(aIndex,aText) {
    	return this._object.SetPoleText(0,aIndex,aText);
    } 
    setLeftPoleText = function(aIndex,aText) {
    	return this._object.SetPoleText(1,aIndex,aText);
    }
    openQuery = function(){
        return this._object.OpenQuery();
    }  
    lockUpdate = function(proc){
        this._object.InvalidatePaint();
        proc();
        this._object.ValidatePaint();
    }
    setCellBorder = function(aCol,aRow,aBorderType, aBorderWidth,aBorderStyle){
        this._object.SetCellBorder(aCol,aRow,aBorderType, aBorderWidth,aBorderStyle);
    }  
    editCellScript = function(aCol,aRow){
        this._object.EditCellScript(aCol,aRow);
    }
    addCellPicture = function(aCol,aRow,aFileName,aStretch){
        this._object.AddCellPicture(aCol,aRow,..io.fullpath(aFileName),aStretch);
    } 
    delCellPicture = function(aCol,aRow){
        this._object.DelCellPicture(aCol,aRow);
    }
    addChartSeries  = function(aChartName,aSeriesType,aSeriesSignText,aSeriesDataText,aSeriesCell){
    	return this._object.AddChartSeries(aChartName,aSeriesType,aSeriesSignText,aSeriesDataText,aSeriesCell);
    }
    
    @_metaProperty;
}
  
namespace reportX{
    _reportOcxPath = ..fsys.getSpecial( 0x1c /*_CSIDL_LOCAL_APPDATA*/  ,"aardio/std/ReportX.ocx");
    if(!..io.exist(_reportOcxPath)){
        ..string.save(_reportOcxPath,$"~\lib\reportX\.dll\ReportX.ocx" ) 
    }
    
    _metaProperty = ..util.metaProperty(
    
    	get = function(k){
			return owner._object[k]
		};
		set = function(k,v){
			owner._object[k] = v;
		};
    	connectionString = {
    		_get = function(){  
    			return owner._object.ConnectionString;
    		}
    		_set = function( v ){
    			owner._object.ConnectionString = v;
    		} 	
    	}; 
    	executeScript = {
    		_get = function(){  
    			return owner._object.ExecuteScript;
    		}
    		_set = function( v ){
    			owner._object.ExecuteScript = v;
    		} 	
    	};
    	printBackColor = {
    		_get = function(){  
    			return owner._object.PrintBackColor;
    		}
    		_set = function( v ){
    			owner._object.PrintBackColor = v;
    		} 	
    	};
    	printBorders = {
    		_get = function(){  
    			return owner._object.PrintBorders;
    		}
    		_set = function( v ){
    			owner._object.PrintBorders = v;
    		} 	
    	};
    	colCount = {
    		_get = function(){  
    			return owner._object.ColCount;
    		}
    		_set = function( v ){
    			owner._object.ColCount = v;
    		} 	
    	};
    	rowCount = {
    		_get = function(){  
    			return owner._object.RowCount;
    		}
    		_set = function( v ){
    			owner._object.RowCount = v;
    		} 	
    	};
    	saved = {
    		_get = function(){  
    			return owner._object.Saved;
    		} 	
    	};
    )
}

/**intellisense()
reportX = reportX报表控件
reportX(__/*窗口对象*/) = 创建reportX报表控件
reportX() = !reportX.
!reportX.connectionString = 数据库连接串
!reportX.executeScript = 单元格改变时是否自动执行脚本
!reportX.openDatabaseGuide() = 打开数据库连接向导
!reportX.newReport(.(列数,行数) = 新建报表
!reportX.openReport(.(报表文件路径) = 打开报表
!reportX.saveReport(.(报表文件路径) = 存储报表
!reportX.openString(.(报表字符串,是否压缩)  = 从字符串载入报表
!reportX.saveString(.(是否压缩) = 保存到字符串
!reportX.printSetup = 打印设置
!reportX.printPreview = 打印预览
!reportX.printSheet =  直接打印
!reportX.saved = 是否保存
!reportX.colCount = 列总数
!reportX.rowCount = 行总数
!reportX.addChartSeries(.(图表名,类型,样式,数据,单元格) = 添加图表内容\n详见帮助文档
!reportX.setCellFontStyle(.(列数,行数,样式类型,是否设置) =  参数@3可选字体类型如下:\n0：粗体；1：斜体；2：下滑线；3：删除线  
!reportX.setCellExpression(.(列数,行数,公式) = 设置单元格公式。\n支持标准函数+、-、*、/、\整除、%取余、^乘方、\nPI、Abs、Sqrt、Ln、Exp、Sin、Cos、Tg、ArcTan、\nFac阶乘、（左扩号、）右扩号\n支持自定义函数Sum(aCol1，aRow1、aCol2、aRow2)、\nAverage(aCol1，aRow1、aCol2、aRow2)、Max(aCol1，aRow1、aCol2、aRow2)、\nMin(aCol1，aRow1、aCol2、aRow2)、Stdev(aCol1，aRow1、aCol2、aRow2)
!reportX.mergeSelected() = 合并选中单元格
!reportX.setTopPoleText(列,__/*标题*/) = 设置列标题
!reportX.setLeftPoleText(行,__/*标题*/) = 设置行标题
!reportX.setFrozenCol(.(起始列,结束列) = 设置冻结列
!reportX.setFrozenRow(.(起始行,结束行) = 设置冻结行
!reportX.setSelectCell(起始行,起始列,结束行,结束列) = 设置选区
!reportX.getSelectCell() = 返回选区 
!reportX.getCellValue(.(列,行) = 返回指定单元格的值
!reportX.editCellScript(.(列,行) = 插入脚本
!reportX.addCellPicture(.(列,行,图像路径,是否拉伸) = 添加图像
!reportX.delCellPicture(.(列,行) = 删除图像
!reportX.setCellBackColor(.(列,行,背景色) = 设置单元格背景色
!reportX.setCellFontColor(.(列,行,字体颜色) = 设置单元格字体颜色
!reportX.setCellFontStyle(.(列,行,字体样式,是否设置) = 设置字体样式（0：粗体；1：斜体；2：下滑线；3：删除线）
!reportX.setCellExpression(.(列,行,公式) = 设置公式
!reportX.setCellBorder(.(列,行,边框类型,宽度,样式) = 边框类型\n    0：四周 1：左边 2：上边 3：右边 4：下边 5：斜线 6：反斜线\n\n边框样式\n    0：实线；1：虚线；2：点；3：点虚线；4点点虚线
!reportX.setCellControl(.(列号,行号,输入控制) = 输入控制\n0：无\n1：字母\n2：自然数\n3：整数\n4：字母数字\n5：字母数字\n6：实数
!reportX.setCellFormat(列号,行号,1,"0.00") = 输入1234.5 显示1234.50
!reportX.setCellFormat(列号,行号,1,"##,###.00") = 输入1234.5 显示1,234.50 
!reportX.setCellFormat(列号,行号,1,"0.00%") = 输入1234.5 显示1234.50%
!reportX.setCellFormat(列号,行号,2,"3") = 输入1234.5 显示1230
!reportX.setCellFormat(列号,行号,3,"yyyy-MM-dd") = 输入1-01-01 显示2001-01-01
!reportX.setCellFormat(列号,行号,3 "yyyy'年'MM'月'dd'日'") = 输入1-01-01 显示2001年01月01日
!reportX.setCellFormat(列号,行号,3 "yyyy-MMM-dd DDD") = 输入1-01-01 显示2001-一月-01 星期一
!reportX.setCellFormat(列号,行号,4,"hh:mm:ss") = 输入1:01:01 显示01:01:01
!reportX.setCellFormat(列号,行号,4,"hh'时'mm'分'ss'秒'") = 输入1:01:01 显示01时01分01秒
!reportX.setCellFormat(列号,行号,4, "h:mm:ss AM/PM") = 输入1:01:01 显示1:01:01 AM
!reportX.setCellValue(.(列号,行号,值) = 修改单元格的值
!reportX.importExcel(.(文件路径,仅导入文本) = 导入excel表格,xls格式
!reportX.importExcelOle(.(文件路径,仅导入文本,列1,行1,列2,行2) = 导入excel表格，\n指定行列参数可省略
!reportX.exportExcel(.(文件路径,按显示值输出) = 导出excel表格,xls格式
!reportX.lockUpdate = @.lockUpdate( function(){ \n	__/*暂停刷新并执行这里的代码*/\n	}\n)
!reportX.OnBeginPrintDoc = @.OnBeginPrintDoc = function(printer,title,titleChange){ 
    __/*开始打印时执行，参数说明
printer：打印机句柄
Title：打印文档名
*/
} 
!reportX.OnButtonClick = @.OnButtonClick = function(aCol,aRow,aNameText,scriptText){ 
    __/*单击按钮类型单元格时执行，参数说明
aCol：列号
aRow：行号
aNameText：单元格按钮文本
aScriptText：单元格按钮脚本
*/
} 
!reportX.OnCellChanged = @.OnCellChanged = function(aCol,aRow,aCellValue ){ 
    __/*单元格的值改变后时执行，参数说明
aCol：列号
aRow：行号
aCellValue：单元格的值
*/
} 
!reportX.OnCellChanging = @.OnCellChanging = function(aCol,aRow,aCellValue ){ 
    __/*单元格的值正在改变时执行，参数说明
aCol：列号
aRow：行号
aCellValue：单元格的值
*/
} 
!reportX.OnCellLDblClick = @.OnCellLDblClick = function(aCol,aRow ){ 
    __/*鼠标左键双击单元格时执行，参数说明
aCol：列号
aRow：行号
*/
} 
!reportX.OnCellLDown = @.OnCellLDown = function(aCol,aRow ){ 
    __/*鼠标左键在单元格上落下时执行，参数说明
aCol：列号
aRow：行号
*/
} 
!reportX.OnCellLUp = @.OnCellLUp = function(aCol,aRow ){ 
    __/*鼠标左键在单元格上抬起时执行，参数说明
aCol：列号
aRow：行号
*/
} 
!reportX.OnCellRDown = @.OnCellRDown = function(aCol,aRow,aScreenX,aScreenY ){ 
    __/*鼠标右键下落时执行，参数说明
aCol：列号
aRow：行号
aScreenX：在屏幕上的横坐标
aScreenY：在屏幕上的纵坐标
*/
} 
!reportX.OnError = @.OnSelectChange = function(aMessage ){ 
    __/*发生错误时执行,参数说明
aMessage：错误信息*/
} 
!reportX.OnInputChange = @.OnInputChange = function(aCol,aRow ){ 
    __/*输入单元格改变时执行,参数说明
aCol：列号
aRow：行号*/
} 
!reportX.OnKeyPress = @.OnKeyPress = function(keyCode){ 
    __/*按键时执行,参数说明
keyCode：按键*/
} 

end intellisense**/
