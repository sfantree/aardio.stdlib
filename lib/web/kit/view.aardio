//view 视图对象
if( _STUDIO_INVOKED && _STUDIO_INVOKED != "process" ){ 
	error("web.kit不能在IDE嵌入线程模式下启动!",2);
}

if(! web[["kit"]] ){
	error("请直接导入 web.kit",2)
}

import fsys;
import util.metaProperty;
import web.kit.query;
import inet.url;
import fsys.cookies;

namespace web.kit;
var wke = _dll;

class view{
	ctor(winform){
		if( winform[["hwnd"]] ){
			var rc = winform.getClientRect();
			this.hWebView = wke.wkeCreateWebWindow(2/*WKE_WINDOW_TYPE_CONTROL*/, winform.hwnd, 0, 0, rc.width(), rc.height());
			this.hWkeWindow = wke.wkeGetWindowHandle(this.hWebView);
			..win.modifyStyle(this.hWkeWindow,,0x2000000/*_WS_CLIPCHILDREN*/); 
			wke.wkeShowWindow(this.hWebView, 0x5/*_SW_SHOW*/);
			
			this._form = winform;
			winform.modifyStyle(,0x2000000/*_WS_CLIPCHILDREN*/);
			winform.modifyStyleEx(0x20/*_WS_EX_TRANSPARENT*/);
			
			if( winform.isForm ? winform.onEraseBkgnd === null ){
				winform.onEraseBkgnd  = function(hwnd,message,wParam,lParam){
    				return 0;
				}
			}
			winform._adjust = function( cx,cy,wParam ) {	 
				wke.wkeResizeWindow(this.hWebView, cx, cy); 
				wke.wkeRepaintIfNeeded(this.hWebView);
			};
			wke.wkeResizeWindow(this.hWebView, rc.width(), rc.height());
		    wke.wkeRepaintIfNeeded(this.hWebView);
		    
			winform.addtimer( 5,
				function(hwnd,msg,id,tick){
					wke.wkeRepaintIfNeeded(this.hWebView);
				} 
			) 
		}
		else{
			this.hWebView = wke.wkeCreateWebView();
		}
		_cache_views__[this.hWebView] = this;
	};
	getForm = function(){ return this._form; };
	@_metaProperty
}
 
namespace view {

	wkeSetMediaVolume = wke.api("wkeSetMediaVolume","void(addr hView,float volume)")
	wkeGetMediaVolume = wke.api("wkeGetMediaVolume","float(addr hView)")
	wkeSetZoomFactor = wke.api("wkeSetZoomFactor","void(addr hView,float volume)")
	wkeGetZoomFactor = wke.api("wkeGetZoomFactor","float(addr hView)")
	
 	_cache_views__ = { /*@{_weak="kv"}*/ }
 	fromJsExecState = function(jsExecState){
 		if(!jsExecState) error("参数错误",2)
 		var hWebView = wke.wkeJSGetWebView(jsExecState);
 		if( _cache_views__[hWebView] ) {
 			return  _cache_views__[hWebView]
 		}
 		var view = { @_metaProperty;hWebView = hWebView };
 	}
 	
	_metaProperty = ..util.metaProperty(
		_serialize = ..thread._callableSerialize;
		jsExecState = {
			_get = function(){
				if(owner.hWebView) return topointer( wke.wkeGlobalExec(owner.hWebView) )
			} 
		};
		mediaVolume = {
			_get = function(){
				if(owner.hWebView) return wkeGetMediaVolume(owner.hWebView);
			}
			_set = function( value ){
				if(owner.hWebView) wkeSetMediaVolume(owner.hWebView,value);
			} 	
		};
		zoomFactor = {
			_get = function(){
				if(owner.hWebView) return wkeGetZoomFactor(owner.hWebView);
			}
			_set = function( value ){
				if(owner.hWebView) wkeSetZoomFactor(owner.hWebView,value);
			} 	
		};
		transparent = {
			_get = function(){
				if(owner.hWebView) return !!( wke.wkeIsTransparentB(owner.hWebView) );
			}
			_set = function( value ){
				if(owner.hWebView) wke.wkeSetTransparent(owner.hWebView,!!value);
			} 	
		}; 
		cookieEnabled = {
			_get = function(){
				if(owner.hWebView) return !!( wke.wkeIsCookieEnabledB(owner.hWebView)  );
			}
			_set = function( value ){
				if(owner.hWebView) wke.wkeSetCookieEnabled(owner.hWebView,!!value);
			} 	
		}; 
		cookie  = {
			_get = function(){
				if(owner.hWebView) {
					var ck = ..raw.str( wke.wkeGetCookieP(owner.hWebView) );
					if(ck){
						return ..string.replace(ck,"[^;]+\s*\=\s*deleted\s*;",""); 
					}
				}
			} 
			_set = function( value ){
				if(owner.hWebView) wke.wkeSetCookie(owner.hWebView,value);
			}	
		};
		enumCookie = function(proc){ 
			var list ={};
			var pCookies = wke.wkeGetCookielistP();
			var cookie = { next = pCookies };
			while(cookie.next){
				cookie = ..raw.convert(cookie.next,{
					ptr data;
					ptr next;
				});
				if( false === proc(..raw.str(cookie.data),cookie.data) )
					break;
			}
			wke.wkeFreeCookielist(pCookies); 
		};
		cookieData = function(){
			var cookieFile = ..fsys.cookies();
			owner.enumCookie(
    			function(sData,pData){ 
        			cookieFile.parseLine(sData)
    			}
			)
			return cookieFile;
		}; 
		cookieSet = function(cookie){
			if(!owner.hWebView)return;
			
			if(type(cookie) == type.table){
				if(#cookie ){
					if( cookie.stringifySetCookieLine){
						var s;
						for(i=1;#cookie;1){
							s = cookie.stringifySetCookieLine(i);
							if(#s) wke.wkeCurlSetOptString(10135/*CURLOPT_COOKIELIST*/, s); 
						} 
					}
					else {
						error("参数请指定fsys.cookies对象",2)
					}
					
					return;
				};
				
				var fc = ..fsys.cookies();
				cookie = fc.stringifySetCookieLine(cookie); 
			}
			if(#cookie) wke.wkeCurlSetOptString(10135/*CURLOPT_COOKIELIST*/, cookie); 
		};
		cookieClear = function(){
			if(owner.hWebView) wke.wkeCurlSetOptString(10135/*CURLOPT_COOKIELIST*/, "ALL"); 
		};
		cookieClearSession = function(){
			if(owner.hWebView) wke.wkeCurlSetOptString(10135/*CURLOPT_COOKIELIST*/, "SESS");
		};
		cookieSave = function(){
			if(owner.hWebView) wke.wkeCurlSetOptString(10135/*CURLOPT_COOKIELIST*/, "FLUSH");
		};
		cookieReload = function(){
			if(owner.hWebView) wke.wkeCurlSetOptString(10135/*CURLOPT_COOKIELIST*/, "RELOAD");
		};
		post = function(url,postData){
			if(owner.translateUrl) url = owner.translateUrl(url);
			wke.wkePostURL(owner.hWebView,..inet.url.encodeMbcs(url,false),postData,#postData);
		};
		go = function(url){
			if( type(url) != type.string ) error("URL参数错误",2);
			if( owner.hWebView ){
				if(owner.translateUrl) url = owner.translateUrl(url);
				
				if( ..io.exist(url) ){
					url = "file:///" + ..io.fullpath(url);   
				}
				elseif( ..io.localpath(url) ){
					url = "file://" + url;  
				} 
				wke.wkeLoadURL(owner.hWebView,..inet.url.encodeMbcs(url,false) );
				
				if(!owner.$flashRender){ //web.kit.flash
					var tUrl = ..inet.url.split(url);
					if(tUrl ? ..string.endWith(tUrl.path,".swf",true) ){
						owner.wait();
						owner.eval("document.plugin.outerHTML = document.plugin.outerHTML")
					}
				}
			}
		};
		canGoBack = function(){
			if( owner.hWebView ){
				return !!( wke.wkeCanGoBackB(owner.hWebView)  );
			}
		};
		canGoForward = function(){
			if( owner.hWebView ){
				return !!( wke.wkeCanGoForwardB(owner.hWebView) );
			}
		};
		goBack = function(){
			if( owner.hWebView ){
				wke.wkeGoBack(owner.hWebView);
			}
		};
		goForward = function(){
			if( owner.hWebView ){
				wke.wkeGoForward(owner.hWebView);
			}
		};
		write = function(html){
			if( html!==null && !type.isString(html)  ) html = tostring(html);
			
			if( owner.hWebView ){
				wke.wkeLoadHTML(owner.hWebView,html );
			}
		};
		html = {
			_get = function(){
				if( owner.hWebView )return owner.document.documentElement.outerHTML; 
			};
			_set = function( value ){
				if( owner.hWebView ){
					if( value!==null && !type.isString(value)  ) value = tostring(value);
					wke.wkeLoadHTML(owner.hWebView,value );
				}
			};
		}
		load = function(url){
			if( type(url) != type.string ) error("文件路径参数错误",2);
			
			if( owner.hWebView ){
				if( ..io.exist(url) ){
					url = "file:///" + ..io.fullpath( url);   
				}
				elseif( ..io.localpath(url) ){
					url = "file://" + url;  
				} 
				wke.wkeLoadURL(owner.hWebView,..inet.url.encodeMbcs(url,false) );
			}
		};
		isLoaded = function(){
			if( owner.hWebView ){
				return wke.wkeIsLoadingSucceededB(owner.hWebView );
			}
		};
		isLoadFailed = function(){
			if( owner.hWebView ){
				return wke.wkeIsLoadingFailedB(owner.hWebView );
			}
		};
		isLoadComplete = function(){
			if( owner.hWebView ){
				return wke.wkeIsLoadingCompletedB(owner.hWebView );
			}
		};
		isDocumentReady = function(){
			if( owner.hWebView ){
				return wke.wkeIsDocumentReadyB(owner.hWebView );
			}
		};
		stopLoading = function(){
			if( owner.hWebView ){
				wke.wkeStopLoading(owner.hWebView );
			}
		};
		reload = function(){
			if( owner.hWebView ){
				wke.wkeReload(owner.hWebView );
			}
		};
		resize = function(w,h){
			if(type(h)!=type.number) error("请指定高度参数",2);
			
			if( owner.hWebView ){
				wke.wkeResize(owner.hWebView,w,h ); 
			}
		};
		getWidth = function(){
			if( owner.hWebView ){
				return wke.wkeGetWidth(owner.hWebView ); 
			}
		};
		getHeight = function(){
			if( owner.hWebView ){
				return wke.wkeGetHeight(owner.hWebView ); 
			}
		};
		getContentsWidth = function(){
			if( owner.hWebView ){
				return wke.wkeGetContentWidth(owner.hWebView ); 
			}
		};
		getContentsHeight = function(){
			if( owner.hWebView ){
				return wke.wkeGetContentHeight(owner.hWebView ); 
			}
		};
		selectAll = function(){
			if(owner.hWebView)wke.wkeEditorSelectAll(owner.hWebView); 
		};
		copy = function(){
			if(owner.hWebView)wke.wkeEditorCopy(owner.hWebView); 
		};
		cut = function(){
			if(owner.hWebView)wke.wkeEditorCut(owner.hWebView); 
		};
		paste = function(){
			if(owner.hWebView)wke.wkeEditorPaste(owner.hWebView); 
		};
		delete = function(){
			if(owner.hWebView)wke.wkeDelete(owner.hWebView); 
		};
		setEditable = function(editable){
			if(owner.hWebView)wke.wkeSetEditable(owner.hWebView,!!editable); 
		};
		focus = function(){
			if(owner.hWebView)wke.wkeSetFocus(owner.hWebView); 
		};
		unfocus = function(){
			if(owner.hWebView)wke.wkeKillFocus(owner.hWebView); 
		};
		sleep = function(){
			if(owner.hWebView)wke.wkeSleep(owner.hWebView); 
		};
		wake = function(){
			if(owner.hWebView) wke.wkeWake(owner.hWebView); 
		};
		isAwake = function(){
			if(owner.hWebView) return wke.wkeIsAwakeB(owner.hWebView); 
		};
		isDirty = function(){
			if( owner.hWebView ) return wke.wkeIsDirtyB( owner.hWebView ); 
		};
		setDirty = function(d){
			wke.wkeSetDirty(owner.hWebView,!!d); 
		};
		addDirtyArea = function(x,y,w,h){
			if(type(h)!=type.number) error("请指定高度参数",2);
			return wke.wkeAddDirtyArea(owner.hWebView,x,y,w,h); 
		};
		paint = function(bits,pitch){
			return wke.wkePaint2(owner.hWebView,bits,pitch:0); 
		};
		mouseEvent = function(message,x,y,flags){
			if(flags===null)flags=1/*_WKE_LBUTTON*/
			if(owner.hWebView)wke.wkeFireMouseEvent(owner.hWebView,message,x,y,flags); 
		};
		contextMenuEvent = function(x,y,flags){
			if(flags===null)flags=2/*_WKE_RBUTTON*/
			if(owner.hWebView)wke.wkeFireContextMenuEvent(owner.hWebView,x,y,flags); 
		};
		mouseWheel = function(x,y,delta,flags){
			if(flags===null)flags=0x10/*_WKE_MBUTTON*/
			if(owner.hWebView)wke.wkeFireMouseWheelEvent(owner.hWebView,x,y,delta,flags); 
		};
		keyDown = function(vkCode,flags,sysKey){
			if(owner.hWebView)wke.wkeFireKeyDownEvent(owner.hWebView,vkCode,flags,sysKey); 
		};
		keyPress = function(charCode,flags,sysKey){
			if(owner.hWebView)wke.wkeFireKeyPressEvent(owner.hWebView,charCode,flags,sysKey); 
		};
		keyUp = function(vkCode,flags,sysKey){
			if(owner.hWebView)wke.wkeFireKeyUpEvent(owner.hWebView,vkCode,flags,sysKey); 
		}; 
		doScript = function(js){
			if( type(js) != type.string ) error("参数必须指定脚本代码",2);
			if(owner.hWebView)wke.wkeRunJS(owner.hWebView,js ); 
		};
		eval = function(js){
			if( type(js) != type.string ) error("参数必须指定脚本代码",2);
			return ..web.kit.jsParseValue(owner.jsExecState, ..web.kit.jsEval(owner.jsExecState,js) );
		};
		document = {
			_get = function(){
				return owner.eval("document");
			} 	
		};
		window = {
			_get = function(){
				return owner.eval("window"); 
			} 	
		};
		script = {
			_get = function(){
				return owner.eval("window"); 
			} 	
		};
		plugin = {
			_get = function(){
				return owner.eval("document.plugin");
			} 	
		};
		location = {
			_get = function(){ 
			 	return owner.document.location.href ;  
			}
			_set = function( value ){
				owner.document.location.href = value;  
			} 	
		};
		destroy = function(){
			if( owner.hWebView ){
				wke.wkeDestroyWebView(owner.hWebView );
				_cache_views__[owner.hWebView] = null;
				owner.hWebView = null;
			}
		}; 
		userAgent = { 
			_set = function( value ){
				if( owner.hWebView )wke.wkeSetUserAgent(owner.hWebView,value);
			} 	
		};	
		initClientHandler = function(){
			if( !owner.hWebView ) return;
			if( owner.clientHandlerPtr ) return;
			
			var this = owner;
			this.clientHandler = {
				pointer onTitleChanged = ..raw.tocdecl(
					function(p,param,s){
						if( this[["onTitleChanged"]] ) {
							s = wke.wkeGetString(s);
							this.onTitleChanged( s ? ..raw.str(topointer(s)) : null );
						}
					},"void(pointer webView,pointer param,pointer title)");
				pointer onURLChanged = ..raw.tocdecl(
					function(p,param,s){
						if( this[["onURLChanged"]] ) { 
							s = wke.wkeGetString(s); 
							this.onURLChanged( s ? ..raw.str(topointer(s)) : null );
						}
					},"void(pointer webView,pointer param,pointer url)");
					
				pointer onNavigation = ..raw.tocdecl(
					function(p,param,navigationType,s){
						if( this[["onNavigation"]] ) { 
							s = wke.wkeGetString(s); 
							return this.onNavigation( s ? ..raw.str(topointer(s)) : null,navigationType );
						}
						return true;
					},"bool(pointer webView,pointer param,int navigationType,pointer url)");
					
				pointer onDocumentReady = ..raw.tocdecl(
					function(p,param,info){
						if( this[["onDocumentReady"]] ) { 
							info = ..raw.convert(info,{
								ptr url;
								ptr frameJSState;
								ptr mainFrameJSState;
							});
							if(info.url){
								var s = wke.wkeGetString(info.url);
								info.url=s ? ..raw.str(topointer(s)) : null;
							}
							return this.onDocumentReady( info.url,info.mainFrameJSState,info.frameJSState );
						}
						return true;
					},"bool(pointer webView,pointer param,pointer info)");
			}
		}; 
		onDocumentReady = {
			_get = function(){
				return owner[["onDocumentReady"]];
			}
			_set = function( value ){
				if(!value){
					wke.wkeOnDocumentReady(owner.hWebView,null,null);
					return;
				}
				if( type(value) != type.function ) error("请指定回调函数",2);
				
				owner.initClientHandler();
				owner[["onDocumentReady"]] = value;
				wke.wkeOnDocumentReady(owner.hWebView,owner.clientHandler.onDocumentReady,null);
			} 	
		}; 
		onNavigation = { 
			_get = function(){
				return owner[["onNavigation"]];
			}
			_set = function( value ){
				if(!value){
					wke.wkeOnNavigation(owner.hWebView,null,null);
					return;
				}
				
				if( type(value) != type.function ) error("请指定回调函数",2);
				
				owner.initClientHandler();
				owner[["onNavigation"]] = value;
				wke.wkeOnNavigation(owner.hWebView,owner.clientHandler.onNavigation,null);
			} 	
		}; 
		onTitleChanged = { 
			_get = function(){
				return owner[["onTitleChanged"]];
			}
			_set = function( value ){
				if(!value){
					wke.wkeOnTitleChanged(owner.hWebView,null,null);
					return;
				}
				
				if( type(value) != type.function ) error("请指定回调函数",2);
				
				owner.initClientHandler();
				owner[["onTitleChanged"]] = value;
				wke.wkeOnTitleChanged(owner.hWebView,owner.clientHandler.onTitleChanged,null);
			} 	
		}; 
		onURLChanged = { 
			_get = function(){
				return owner[["onURLChanged"]];
			}
			_set = function( value ){
				if(!value){
					wke.wkeOnURLChanged(owner.hWebView,null,null);
					return;
				}
				if( type(value) != type.function ) error("请指定回调函数",2);
				
				owner.initClientHandler();
				owner[["onURLChanged"]] = value;
				wke.wkeOnURLChanged(owner.hWebView,owner.clientHandler.onURLChanged,null);
			} 	
		};
		querySelector = function(...){
			var doc = owner.waitDoc();
			if(doc) return doc.querySelector(...);
		};
		querySelectorAll = function(...){
			var doc = owner.waitDoc();
			if(doc) return doc.querySelectorAll(...);
		};
		queryEles = function(selectors,opt){
		 	var tab = {}
		 	var cmp = ..string.cmpMatch;
		 	if( type(selectors) == "table" ){
		 		opt = selectors;
		 		selectors = "*";
		 	}
		 	var eles = owner.querySelectorAll(selectors);
		  
		 	for(i=0;eles.length-1;1){
		 		var ele = eles[i];
		 		try {
					for(k,v in opt) { 
						attr = ele[k]; 
						if( type(attr) == "table" ){
							if( type(v) == "table" ){
								for(attr_k,attr_v in v){
									if( ! cmp( attr[attr_k],attr_v )){  
										return;
									} 
								} 
							}
							else {
								return;
							};
						} 
						if( ( (k == "id") || (k == "name") ) && ( !..string.match(v,"\p")) ){
							if( ( attr!=v ) && ( 0 != ..string.cmp( attr,v ) ) ){  
								return;
							} 
						}
						elseif( ( attr!=v ) && ( ! cmp( attr,v ) ) ){  
							return;
						} 
					} 
					..table.push(tab,ele);
				}
		 	} 
		 	
			return ..web.kit.query( tab,owner );
		};
		waitQueryEles = function(selectors,args,timeout,complete=true ){
			var qEle;
			var wb = owner;
			return ..win.wait(
				function(){
					var doc = wb.document;
					var qEle =  wb.queryEles(selectors,args);
					if( #qEle > 0  && ( (!complete) || doc.readyState == 'loaded' || doc.readyState  == 'complete')  )
						return qEle;
				},
				wb._form.hwnd,timeout,200
			); 	
		};
		dispatchEvent = function(ele,event){ 
			ele = owner.getEle(ele);
            var evt = owner.document.createEvent( 'Events' );  
            evt.initEvent(event, true, true);  
            return !ele.dispatchEvent(evt);   
    	}; 
		getEle = function( id ){
        	if( type(id) == "table" ) return id;
        	var doc = owner.document;
        	var ele = doc.getElementById(id);
        	if( ele ) return ele;
        	ele = doc.getElementsByName(id);
        	if(ele) return doc[0];
    	};
    	waitEle = function(name,frame,timeout,waitState){
			var wb = owner;
			return ( ..win.wait(
				function(){
					return ( wb.getEle(name) );
				},owner.getForm().hwnd,timeout,200
			) ); 
		};
		waitDoc = function(timeout){
			var delay = ..win.delay;
			var isWnd = ..win.isWindow;
			var hwnd = owner._form.hwnd;
			var tk = 0;
			
			while( delay(200) && isWnd(hwnd)  ){
		  		if( owner.hWebView && (wke.wkeIsDocumentReadyB( owner.hWebView ) ) ){
		  			return owner.document;
				}		
					
				if( timeout ) {
					tk+=201;
					if( tk>timeout )
						return null,"Timeout!"  
				};
			} 
		};
		wait = function(url,timeout){
			var delay = ..win.delay;
			var isWnd = ..win.isWindow;
			var hwnd = owner._form.hwnd;
			var tk = 0;
			
			if(type(url) == type.number){
				timeout = url;
				url = null;
			}
			
			var location;
			var onURLChanged = owner.onURLChanged;
			owner.onURLChanged = function(url){ 
				location = url;
			}
			 
			while( delay(200) && isWnd(hwnd)  ){
		  		if( owner.hWebView && (wke.wkeIsLoadingCompletedB( owner.hWebView ) ) ){
		  			var succeeded = !!( wke.wkeIsLoadingSucceededB(owner.hWebView) );
		  			if( succeeded ){
		  				if(#url){
		  					if( ! ( location ?  ..string.find( location,url) ) ){
		  						delay(200); 
		  						continue; 
		  					};
		  				}
		  			}
		  			owner.onURLChanged = onURLChanged;
		  			return succeeded;
				}		
					
				if( timeout ) {
					tk+=201;
					if( tk>timeout ){
						owner.onURLChanged = onURLChanged;
						return null,"Timeout!"  
					}
				};
	  		
			} 
			
			owner.onURLChanged = onURLChanged;
			return false;
		}; 
		["select"] = function(eleName,v,sel=true){ 
        	var opt,child,value,text;
        	var ele = owner.getEle(eleName);
         
        	if(ele){
            	if(type(v)==type.number and v < ele.length){
                	opt = ele.options[i];
            	}else{
                	for(i=0;ele.length-1;1){
                    	child = ele.options[i]; 
                    	if( child ? ( (child.value==v) or (child.innerText==v) ) ){
							opt=child;
						}
                	}
            	}
        	} 
        	if( opt ){
            	opt.selected = sel;
            	if( ele.onchange ) owner.dispatchEvent(ele,"change");
        	}
        	return opt; 
    	};
    	["setEle"] = function(eleName,val,name){ 
        	var ele = owner.getEle(eleName);
        	if(!ele) return null,"未找到节点";
         	
        	if( type(val) == type.table ){
            	for(k,v in val) 
                	owner.setEle(eleName,v,k); 
        	}
        	elseif(name){ 
            	ele[name] = val; 
        	}
        	elseif( ..string.cmp(ele.tagName,"textArea") == 0  ){
            	ele.innerHTML = val;
        	}
        	elseif( !..string.cmp(ele.tagName,"input") ){
            	select(ele.type) { 
                	case "radio","checkbox" {
                    	ele.checked = val;
                	};
                	else {
                    	ele.value = val;
                	};
            	};
        	}; 
        	elseif(  ..string.cmp(ele.tagName,"select") == 0 ){
            	owner.select( ele,val );
        	}
        	return ele;
    	};  
        click = function( eleName,min=1,max=500 ){
        	var ele = owner.getEle(eleName); 
			owner.dispatchEvent(ele,"mousemove"); 
			owner.dispatchEvent(ele,"mouseenter"); 
			owner.dispatchEvent(ele,"mouseover");  
			
    		..win.delay( ..math.random(min,max) );
    		owner.dispatchEvent(ele,"keydown");
    		owner.dispatchEvent(ele,"keyup");
    		owner.dispatchEvent(ele,"mousedown");
    		owner.dispatchEvent(ele,"mouseup") 
    		
    		if(ele.click) ele.click(); 
    		owner.dispatchEvent(ele,"click");
    		if(ele.tagName=="INPUT"){ ele.focus();}
    		owner.dispatchEvent(ele,"focus");
    		
    		owner.dispatchEvent(ele,"mousemove"); 
    		owner.dispatchEvent(ele,"mouseleave");
    		owner.wait(); 
    	};
    	attach = function( func,event, ele){  
			if(!event) error("请指定事件参数@2",2);
			event = ..string.replace(event,"^on",""); 
			
 			if( !ele ) ele = owner.getDoc();
 			elseif( type(ele) == type.string ){
 				ele = owner.getEle(ele); 
 			}
 			if(!ele) return false;
 			 
 			ele.addEventListener(event,func,true); 
 			return func;
		}; 
		attachAll = function( tEle ){
			for( ele,tEvent in tEle ){ 
				for(event,func in tEvent ){
					owner.attach( func,event,ele);
				} 
			} 
		};
		print = function(hdc,scale){
			error("使用web.kit.form打开网页才能支持此函数",2);	
		};
		loadScript  = function(path,frame,charset,prop ){   
			var doc = owner.waitDoc()  
			if(!doc) return; 
		  
		  	if( type(path) == "table" ){
		  		var r = {} 
		  		for(n,p in path){
		  			for(i=1;#p ){ 
		  				if( owner.script[n] )
		  					break; 
		  				 	
		  				owner.loadScript( p[i],frame,charset,prop );
		  			}
		  			r[n] = owner.script[n];
		  		} 
		  		return r ;
		  	} 
    				
			if( (!charset) && (doc.charSet == "utf-8") ){
				charset = "utf-8"
			}
			
			var s = ..string.load( path ); 
			if( #s ){ 
				if( s[1] == 0xEF  && s[2] == 0xBB && s[3] == 0xBF) {
					s = ..string.fromto( ..string.sub(s,4 ) );
				}
				else if ( charset ?  ..string.cmp(charset,"utf-8") != 0 ){
					s = ..string.fromto( s,0,65001 );
				};
				
				return owner.doScript( s ); 
			}
			else {
				if( ..io.localpath(path) )
					return;
			}
			
			var ele = doc.createElement("script");
			ele.type = "text/javascript"; 
			ele.charset = charset;
			
			if( prop ) ..table.mixin( ele,prop ) 
    		ele.src = path;
    		
    		var loaded;
    		ele.onload = function(){
    			loaded = true;
    		};
    	 
    	 	var ele = doc.getElementsByTagName('head')[0].appendChild(ele) ;
    	 	var delay = ..win.delay;
    	 	if( ! prop[["async"]] ){ 
    			while( !loaded ){ 
    				if(!delay(10)) return false;
    			}
    			owner.waitDoc(); 
    		}
    		
    		return ele;
		};
		jQuery = {
			_get = function(){ 
				owner.waitDoc();
				return owner.script.jQuery || owner.loadScript( {
					jQuery = {
						"/res/js/jQuery/jQuery.min.js";
						"/view/js/jQuery/jQuery.min.js";
						"http://libs.baidu.com/jquery/1.10.2/jquery.min.js";
						"http://lib.sinaapp.com/js/jquery/1.10.2/jquery-1.10.2.min.js";
						"http://code.jquery.com/jquery-1.10.2.min.js" 
					}
				}, ,"utf-8" ).jQuery; 
			} 
		}; 
	)
	
	_metaProperty.flash = _metaProperty.plugin;
}
 
/**intellisense()
web.kit.view = webkit视图
web.kit.view() = 创建WebKit视图,\n如果不指定参数视图不负责创建显示窗口,\n如果在参数中直接指定一个窗口对象,则创建默认的显示窗口,\n控件创建的窗口句柄可通过hWkeWindow属性获取\n!web_kit_view.
wkeWebView = !web_kit_view.
end intellisense**/


/***intellisense(!web_kit_view)
_form = 浏览器宿主窗口\n!static.
external = @.external = {\n	__/*external的成员函数可在JS中调用*/\n};
zoomFactor = 缩放百分比\n浮点数,1.0为实际大小
mediaVolume = 音量,范微0.0到1.0
transparent = 背景是否透明\n不透明则使用白色背景
cookie = 返回网页cookie，文本
cookieEnabled = 是否允许使用cookie
enumCookie = @.enumCookie(\n	function(sData,pData){\n		__/*pData为cookie指针,sData为Cookie文本*/\n	}\n)	
cookieClear() = 清空cookie
cookieClearSession() = 清空会话cookie
cookieSave() = 保存cookie
cookieReload() = 自文件重新载入cookie
cookieData() = 返回所有cookie,返回值为fsys.cookies对象\n!stdfsyscookies.
cookieSet(__) =  设置cookie,\n参数可以是单个cookie的字段键值对组成的表,\n也可以是符合HTTP响应头中设置Cookie格式相同的字符串\n也可以指定fsys.cookies对象\n了解cookie格式的细节，请查看fsys.cookies库
post(.(网址,POST数据) = POST提交数据
go("__/*网址*/") = 打开网址\n如果导入 web.npPlugin.flash 则支持输入 swf 文件网址
canGoBack() = 能否后退
canGoForward() = 能否前进
goBack() = 后退
goForward() = 前进
userAgent = 设置User Agent
write(.(html) = 写入HTML,如果参数@1不是字符串、buffer、null 则自动转为字符串
html = @.html = /**\n<!doctype html>\n<html>\n<head>\n    <style type="text/css">\n    html,body{ height:100%; margin:0; } __\n    </style>\n    <script type="text/javascript"></script>\n</head>\n<body>\n    <div id="header"></div>\n    <div id="container"> \n        <div class="lside"> </div> \n        <div class="rside"> </div>  \n    </div>\n</body>\n</html>\n**/
load(.( filename) = 加载文件
isLoaded() =  是否加载成功
isLoadFailed() = 是否加载失败
isLoadComplete() = 是否加载完成\n即isLoaded或isLoadFailed函数返回true
isDocumentReady() = 文档对象是否准备就绪
stopLoading() = 停止加载
reload() = 重新载入
resize(.(w,h) = 调整大小
getWidth() = 视图宽度
getHeight() = 视图高度
getContentsWidth() = 文档宽度
getContentsHeight() = 文档高度
selectAll() = 全选
copy() = 复制
cut() = 剪切
paste() = 复制
delete() = 删除
setEditable(.(editable) = 设置编辑状态
focus() = 设置焦点
unfocus() = 取消焦点
sleep() = 休眠
wake() = 恢复运行
isAwake() = 是否运行
isDirty() = 是否需要重绘
setDirty(.(dirty) = 设置是否需要重绘
addDirtyArea(.(x,y,w,h) = 设置无效区域
paint(.(bits,pitch) = 绘图,参数@1为位图像素数组指针\n关于这个函数的用法请参考web.kit.gdiRender
mouseEvent(.(message,x,y,flags) = 转发鼠标事件到网页\nmessage为_WM_前缀的窗口鼠标消息常量\nx,y 参数为相对于窗口左上角的坐标值,\n\nflags 参数为_WKE_前缀常量,可省略,支持的选项如下\n_WKE_CONTROL 表示按下Ctrl键_WKE_SHIFT 表示按下Shift键\n_WKE_LBUTTON 表示按下鼠标左键\n_WKE_MBUTTON 表示按下鼠标左键\n_WKE_RBUTTON 表示按下鼠标右键\n多个选项以 | 连接\n不指定则默认为_WKE_LBUTTON
contextMenuEvent(.(x,y,flags) = 转发右键菜单事件到网页\nx,y 参数为相对于窗口左上角的坐标值,\n\nflags 参数为_WKE_前缀常量,可省略,支持的选项如下\n_WKE_CONTROL 表示按下Ctrl键_WKE_SHIFT 表示按下Shift键\n_WKE_LBUTTON 表示按下鼠标左键\n_WKE_MBUTTON 表示按下鼠标左键\n_WKE_RBUTTON 表示按下鼠标右键\n多个选项以 | 连接\n不指定则默认为_WKE_RBUTTON
mouseWheel(.(x,y,delta,flags) = 转发滚轮事件到网页\nx,y 参数为相对于屏幕左上角的坐标值,\ndelta为120的倍数,负数向下滚动,正数向上滚动,\n\nflags 参数为_WKE_前缀常量,可省略,支持的选项如下\n_WKE_CONTROL 表示按下Ctrl键_WKE_SHIFT 表示按下Shift键\n_WKE_LBUTTON 表示按下鼠标左键\n_WKE_MBUTTON 表示按下鼠标左键\n_WKE_RBUTTON 表示按下鼠标右键\n多个选项以 | 连接\n不指定则默认为_WKE_MBUTTON
keyUp(.(vkCode,flags,sysKey) = 转发按键释放事件到网页\n\nvkCode 参数指定虚拟键码,请参考标准库key.VK\n\nflags 参数可用指定一个或多个以下选项:\n       _WKE_REPEAT表示重复按键,\n       _WKE_EXTENDED表示扩展键,\n       多个选项以 | 连接\n\nsysKey 参数指定是否同时按下ALT键,
keyPress(.(charCode,flags,sysKey) = 转发WM_CHAR事件到网页\n\ncharCode 参数指定字符代码,\n\nflags 参数可用指定一个或多个以下选项:\n       _WKE_REPEAT表示重复按键,\n       _WKE_EXTENDED表示扩展键,\n       多个选项以 | 连接\n\nsysKey 参数指定是否同时按下ALT键,
keyDown(.(vkCode,flags,sysKey) = 转发按键释放事件到网页\n\nvkCode 参数指定虚拟键码,请参考标准库key.VK\n\nflags 参数可用指定一个或多个以下选项:\n       _WKE_REPEAT表示重复按键,\n       _WKE_EXTENDED表示扩展键,\n       多个选项以 | 连接\n\nsysKey 参数指定是否同时按下ALT键,
doScript(.(js代码) = 执行JS脚本
eval(.(JS表达式) = 计算JS表达式并返回值
document = Javascript网页文档对象\ndocument.
window = Javascript全局对象\n!jsGlobal.
script = Javascript全局对象\n!jsGlobal.
location = 当前网址
waitDoc() = 等待文档对象准备就绪,并返回文档对象\ndocument.
waitEle(.("ID或名称",,超时值) = 返回一个节点对象,除参数一以外,其他能数可选\n第三个参数指定超时值(单位为毫秒)\n参数@2必须为空
wndproc(.(hwnd,message,wParam,lParam) = 处理窗口消息\n返回值为真表示不再需要后续默认消息处理
destroy() = 销毁对象
hWkeWindow = 如果在创建web.kit.view对象时指定了父窗口参数,并由WKE创建控件显示窗口\n此属性返回WKE创建的窗口句柄
getForm() = 返回该视图所在窗体对象\n!winform.
getForm(false) = 返回该视图所在窗口或控件对象
print(.(hdc,scale) = 用于GDI打印输出,hdc为打印机设备DC，\nscale指定缩放比例,正数为缩放文档,负数按输出页面缩放\n例如-0.5为缩放至页面的50%
wait( = 该函数等待网页完全加载完成,\n因为部份网页遇到问题可能部份内容无法完全加载,\n建议大家尽可能使用等待部份加载的waitEle或waitDoc等函数替代
wait(.("网址",超时值) = 等待指定的网页加载完成,所有参数可选,\n等待的网址支持模式语法,参数@2指定最大超时值,单位毫秒
dispatchEvent("__/*节点ID*/","click") = 触发事件
onURLChanged = @.onURLChanged = function(url){ 
	if(#url) owner.getForm().msgbox( url )
}
onTitleChanged = @.onTitleChanged = function(title){ 
	owner.getForm().text = title;
}
onNavigation = @.onNavigation = function(url,navigationType){ 
	if( navigationType == _WKE_NAVIGATION_TYPE__ ){
		
	}
	return true;
}
onDocumentReady = @.onDocumentReady = function(url,mainFrameJSState,frameJSState){
	if( mainFrameJSState == frameJSState ){
		__/*主框架加载完成*/
	}
}
onAlertBox = @.onAlertBox = function(str){
    __/*alert对话框触发此事件,返回true不显示默认对话框*/	 
    return true;   
}
onConfirmBox = @.onConfirmBox = function(str){
    __/*确认对话框触发此事件,\n定义此事件后不再显示确认对话框,可在这里修改返回值*/	
   return result; 
}        
onPromptBox = @.onPromptBox = function(title, default){
    __/*输入对话框,可选返回输入的字符串\ntitle为标题,default为默认显示在输入框的文本*/
    return;
}
translateUrl = @.translateUrl = function(url){
    __/*可在此函数中转换 go 函数传入的 URL 参数*/
    return url;
}
querySelectorAll(.("CSS选择器") = 查询并返回节点集合,length属性获取节点个数
querySelector(.("CSS选择器") = 查询并返回节点
querySelectorAll() = !ele.
querySelector() = !ele.
waitQueryEles(  = 函数等待queryEles()返回有效节点,\n即使找不到节点,此函数也会返回一个空数组,\nweb窗体关闭或超时返回null空值
waitQueryEles(.(CSS选择器,查询参数表,超时值,时间间隔,节点完全加载) = 函数等待wb.queryEles()返回有效节点,\nweb窗体关闭或超时返回null空值\n\n该函数返回的是一个数组,但可以通过调用数组的成员函数\n批量调用节点的同名成员函数,支持click函数\n\n\n\n参数@1指定一个表对象，\n该参数表可包含一个或多个键值，用于匹配节点的属性值,\n属性值使用 string.cmpMatch函数进行比对，\n等价于调用string.cmp函数进行忽略大小写的比较。\n并且在失败后调用 string.match函数使用模式匹配语法进行比较。\n\n注意在匹配节点属性时有几个例外：\ntagName,id,name属性如果匹配值不含标点则使用忽略大小写的完全比对（禁用模式匹配和部分匹配）\n\n\n可选使用参数@2指定超时值，单位毫秒，,其他参数可选
queryEles( = 搜索节点对象,该函数返回的是一个数组,\n但可以通过调用数组的成员函数批量调用节点的同名成员函数,支持click函数,\n即使找不到节点,此函数也会返回一个空数组,
queryEles(.(CSS选择器,查询参数表,超时值) = 搜索节点对象,该函数返回的是一个数组,\n但可以通过调用数组的成员函数批量调用节点的同名成员函数,支持click函数\n\n参数@1指定一个表对象，\n该参数表可包含一个或多个键值，用于匹配节点的属性值,\n属性值使用 string.cmpMatch函数进行比对，\n等价于调用string.cmp函数进行忽略大小写的比较,\n并且在失败后调用 string.match函数使用模式匹配语法进行比较。\n\n注意在匹配节点属性时有几个例外：\ntagName,id,name属性如果匹配值不含标点则使用忽略大小写的完全比对（禁用模式匹配和部分匹配）\n\n\n可选使用参数@2指定获取网页文档对象的超时值，单位毫秒，此参数一般不需要指定
queryEles() = !ele. 
waitQueryEles() = !ele.
setEle(.(控件名字,属性值,属性名) = 更新控件值,成节返回节点,失败返回null空值\n第一个参数也可以是ele对象,\n属性名,框架名为可选参数.\n属性值可以是一个指定多个属性键值对的table对象
select("控件名字",__/*输入选项索引,或选项值、选项文本*/) = 查找下拉选框的指定选项,选中并返回选项节点\n第一个参数也可以是ele对象
click(.(控件名字,随机延时最小值,延时最大值,框架名) = 模拟点击控件,\n第一个参数也可以是ele对象,\n随机延时值为可选参数,默认为1,500.\n框架名为可选参数
attach = @.attach(\n	function(event){\n		io.print("点击坐标", event.screenX,event.screenY )\n		io.print("触发节点", event.srcElement.innerText )\n	}\n	,"onclick__",ele/*也可输入getEle()所需参数,省略表示doc*/ \n)
attachAll = @.attachAll(  \n	/* html节点ID = 事件触发函数表 */\n	caption_button_min = {\n		onclick = function(event){\n			wb._form.hitmin();	\n		} \n	}\n)  
loadScript("js地址","","utf-8") = 动态加载js文件\N可选用第三个参数指定文件编码
jQuery("__") = jQuery选择器,并可自动载入jQuery库\nn首次调用按需加载jQuery v1.9:\n "/res/js/jQuery/jQuery.min.js"\n失败则通过网络CDN服务器下载jquery-1.9.0.min.js
jQuery() = 无参数时返回jQuery类对象\n首次调用按需加载 jQuery v1.9:\n "/res/js/jQuery/jQuery.min.js"\n失败则通过网络CDN服务器下载jquery-1.9.0.min.js\n!jQuery.
plugin = 获取默认的或 name 属性为 plugin 的 NPAPI 插件对象
flash = 获取默认的或 name 属性为 plugin 的 Flash NPAPI 插件对象\n直接打开 *.swf 文件时会自动创建此对象\n!webNpPluginFlash.
end intellisense***/

/**intellisense(!webNpPluginFlash)
Play() = 播放
Stop() = 暂停
Rewind() = 返回到影片的第一帧
Back() = 影片后退一帧并停止播放
Forward() = 影片后退一帧并停止播放
GotoFrame(.(索引) = 将影片跳转到指定的帧并停止播放.\n必须首先调用percentLoaded()函数保证影片完全加载
PercentLoaded() = 返回影片加载的百分比
LoadMovie(.(layer,url) = 将由url指定的影片载入到由layer指定的层上\n如果url指定了一个资源文件路径,使用临时文件加载,并设置embedMovie属性为 true
Pan(.(x,y,mode) = 将一个放大过的影片平移由x和y指定的距离,x和y均为相对值,\nmode默认值为1,按百分比计算,如果设为0则以像素计算
SetVariable(.("变量名",值) = 设置FLASH变量
GetVariable("$version__/*变量名*/") = 获取FLASH变量
TotalFrames()= 返回影片总帧数
CurrentFrame() = 当前帧索引,注意第一帧索引为0
IsPlaying() = 是否正在播放动画
SetZoomRect(.(left,top,right,buttom)=放大指定区域
Zoom(.(percent)=改变动画大小   
TGotoFrame(.(movieClip,frame_number)- movieClip跳转到指定帧数
TGotoLabel(.(movieClip,label_name)= movieClip跳转到指定标签
TCurrentFrame(.(movieClip)= 回传movieClip当前帧-1
TCurrentLabel(.(movieClip)=回传movieClip当前标签
TPlay(.(movieClip)=播放movieClip
TStopPlay(.(movieClip)=停止movieClip的播放
TCallFrame(.(movieClip,frame_number)=call指定帧上的action
TCallLabel(.(movieClip,label)=call指定标签上的action
TGetProperty(.(movieClip,property)=获取movieClip的指定属性
TSetProperty(.(movieClip,property,number)=设置movieClip的指定属性
setAttribute(.(name,value)=设置节点属性,\n相当于在HTML里写属性值
getAttribute(.(name)=获取节点属性
end intellisense**/

/**intellisense()
_WKE_NAVIGATION_TYPE_LINKCLICK=@0/*_WKE_NAVIGATION_TYPE_LINKCLICK*/
_WKE_NAVIGATION_TYPE_FORMSUBMITTE=@1/*_WKE_NAVIGATION_TYPE_FORMSUBMITTE*/
_WKE_NAVIGATION_TYPE_BACKFORWARD=@2/*_WKE_NAVIGATION_TYPE_BACKFORWARD*/
_WKE_NAVIGATION_TYPE_RELOAD=@3/*_WKE_NAVIGATION_TYPE_RELOAD*/
_WKE_NAVIGATION_TYPE_FORMRESUBMITT=@4/*_WKE_NAVIGATION_TYPE_FORMRESUBMITT*/
_WKE_NAVIGATION_TYPE_OTHER=@5/*_WKE_NAVIGATION_TYPE_OTHER*/
_WKE_LBUTTON=@1/*_WKE_LBUTTON*/
_WKE_RBUTTON=@2/*_WKE_RBUTTON*/
_WKE_SHIFT=@4/*_WKE_SHIFT*/
_WKE_CONTROL=@8/*_WKE_CONTROL*/
_WKE_MBUTTON=@0x10/*_WKE_MBUTTON*/
_WKE_EXTENDED=@0x100/*_WKE_EXTENDED*/
_WKE_REPEAT=@0x4000/*_WKE_REPEAT*/
end intellisense**/
