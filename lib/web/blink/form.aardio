//form 窗口对象
if( _STUDIO_INVOKED && _STUDIO_INVOKED != "process" ){ 
	error("web.blink不能在IDE嵌入线程模式下启动!",2)
}

import web.blink;
import web.blink.gdiRender;
namespace web.blink;
var wke = _dll;

class form{
	ctor( winform ){
		if( ! winform[["hwnd"]] ) error("参数@1必须是窗口对象",2);
		
		if( winform.className == "static" ){
			winform.modifyStyle(,0x100/*_SS_NOTIFY*/ | 0x2000000/*_WS_CLIPCHILDREN*/); 
		} 
		else{
			if( winform.isForm &&  (! ..table.next( winform._ctrlHwnd) ) 
				&& ( ! ..win.getStyle(winform.hwnd,0x40000000/*_WS_CHILD*/) ) ){
				::CreateWindowEx(0x20/*_WS_EX_TRANSPARENT*/,"static",""
					,0x44000000/*_WS_CHILD | _WS_CLIPSIBLINGS*/ ,-2,-2,1,1,winform.hwnd,winform._getFreeCommandId(), _HINSTANSE ); 
			}
			winform.modifyStyle(,0x2000000/*_WS_CLIPCHILDREN*/)
		};
		
		if( winform.isDialogMessage ){
			if( winform.isDialogMessage!= ..win.isDialogMessage ){
				error("在创建网页窗体以前,禁止重写默认 isDialogMessage() 函数 ",2)
			}
			else{
				winform.isDialogMessage = function(hwnd,msg) {
					return false; 
				}
			}
		};
		
		this = ..web.blink.view();
		wke.wkeSetHandle(this.hWebView,winform.hwnd);
		var gdiRender = ..web.blink.gdiRender(this,winform.hwnd);
		this._form = winform;
		
		if( winform.dpiScaleX && winform.dpiScaleX !== 1 ){
			this.zoomFactor = winform.dpiScaleX;
		}
		winform.afterDpiChanged = function(scaleX){
			this.zoomFactor = scaleX;	
		}
		
		var rect = winform.getClientRect();
		this.resize(rect.width(),rect.height());
		gdiRender.resize(rect.width(),rect.height());;
		
		var needRedrawWindow = 0;
		var isIconic = ..win.isIconic;
		wkeSetDefaultPaintUpdater(this.hWebView,winform.hwnd);
		
		var suppressMove = 0;
		winform.wndproc = function(hwnd,message,wParam,lParam){
			if(message == 0x200/*_WM_MOUSEMOVE*/){
				suppressMove = suppressMove + 1;
				if( suppressMove <= 3 ) return;
				suppressMove = 0;
			}
			elseif( message == 0x2/*_WM_DESTROY*/){
				this.destroy();
				gdiRender.delete();
				return;
			} 
			
			if( this.hWebView  ){
				var handled,retCode;
				handled,retCode,needRedrawWindow = WebViewWndProc(this.hWebView,hwnd,message,wParam,lParam,0,needRedrawWindow);
				if( message == 0x5/*_WM_SIZE*/){
					gdiRender.resize( ::LOWORD(lParam), ::HIWORD(lParam));
					return;
				}
				
				if( needRedrawWindow ){
					if( !isIconic(hwnd) ) gdiRender.draw(winform.hwnd);
				}
				
				if(handled) return retCode;
			}
		}
		
		winform.onDirectDrawBackground = function(hdc){
		   	var hViewDc = this.getDc();
		   	var x,y,cx,cy = winform.getPos();
			if( hViewDc ) ::BitBlt(hdc,x,y,cx,cy,hViewDc,0,0,0xCC0020/*_SRCCOPY*/); 
		}
	};
	getForm = function(top){
		if( top === null ) top = true;
		if( top ) return  ..win.form.getForm( this._form.hwnd ); 
		return this._form;
	};
	getCaret = function(){
		if(owner.hWebView) {
			var r = {int x;int y;int width;int height};
			wkex.wkexGetCaret(owner.hWebView,r); 
			if(r.height) return r;
		}
	}; 
}

namespace form{
    wkex = ..web.blink._dllx;
	WebViewWndProc = wkex.api("WebViewWndProc","bool(addr hView,addr hwnd,INT message,ADDR wParam,addr lParam,int &retCode,int &needRedrawWindow)" ); 
	wkeSetDefaultPaintUpdater = wkex.api("wkeSetDefaultPaintUpdater","bool(addr hView,addr hwnd)" ); 
}

/**intellisense()
web.blink.form = 浏览器窗口
web.blink.form(.(winform) = 创建浏览器窗口,参数为普通窗口对象\n注意:任何网页返回的js对象应当现用现取,不可保存在aardio中\n延时或任何窗口消息分发都可能导致js传给aardio的对象被回收
web.blink.form() = !web_blink_view.
end intellisense**/
