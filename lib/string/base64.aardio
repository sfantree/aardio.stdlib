//base64 编码
namespace string.base64; 

//base64编码表
var c64 =  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";   
  
//base64解码表
var m64 = {   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255;  62; 255; 255; 255;  63;   
     52;  53;  54;  55;  56;  57;  58;  59;  60;  61; 255; 255;   
    255; 254; 255; 255; 255;   0;   1;   2;   3;   4;   5;   6;   
      7;   8;   9;  10;  11;  12;  13;  14;  15;  16;  17;  18;   
     19;  20;  21;  22;  23;  24;  25; 255; 255; 255; 255; 255;   
    255;  26;  27;  28;  29;  30;  31;  32;  33;  34;  35;  36;   
     37;  38;  39;  40;  41;  42;  43;  44;  45;  46;  47;  48;   
     49;  50;  51; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255; 255;   
    255; 255; 255; 255   
};    

var push = ..table.push;
encode  = function (  s  ){
    var p = {};
    var ln = #s;
    var lv = 3 * ..math.floor(ln/3) ;

    for(i = 1; lv; 3){
        push(p, c64[( (s[i] ) >> 2 ) +1 ]
              , c64[( (( (s[i] ) & 3) << 4) + ( (s[i+1] ) >> 4))+1]
              , c64[( (( (s[i+1] ) & 0xf) << 2) + ( (s[i+2] ) >> 6))+1]
              , c64[( (s[i+2] ) & 0x3f)+1]
        );
    }

    if (lv < ln){
        var a = s[lv + 1] ;
        var b = ( ln == (lv + 2)) ? (s[ln] ) : 0 ;
        var c = 0;
        push(p, c64[ ( a >> 2 )+1]
              , c64[( ((a & 3) << 4) + (b >> 4) ) +1]
              , ((lv + 2) > ln) ?  '='# : c64[( ((b & 0xf) << 2) + (c >> 6) ) +1]
              , '='#
        );
    }

    return ..string.pack( p );
} 
 
decode = function( s )    {   
    var t, y = 0,0 ; 
    var c;   
    var g = 3;   
     
    tbuffer = {};
    for( x=1; #s )   {   
        c = ( m64[s[x] + 1 ]) ;  
      
        if(c == 255) continue;   
        if(c == 254) { c = 0; g--; }   
  
        t = ( (t << 6) | c ) & 0xffffffff  ;   
  
        y++;
        if( y == 4) {      
            push( tbuffer,((t>>16)&255) ) ;   
            if(g > 1) push( tbuffer,((t>>8)&255) );   
            if(g > 2) push( tbuffer,t&255);   
            t = 0;   
            y = 0;
        }   
    }   
    
   return ..string.pack( tbuffer );   ;   
}  

/*intellisense(string.base64)
encode(__) = base64编码,\n建议使用速度更快的 crypt.bin.encodeBase64()函数替代
decode(__) = base64解码,\n建议使用速度更快的 crypt.bin.decodeBase64()函数替代
end intellisense*/
