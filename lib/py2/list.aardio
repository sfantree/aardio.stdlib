//list 列表数组
import util.metaProperty;
namespace py2;
	
class list {

	ctor( object ){ 

		var tt = type(object) 
		select(tt) {
			case type.pointer{
				this.pyObject = object;
			}
			case type.null{
				this.pyObject = PyList_New(0);
			}
			case type.number{
				this.pyObject = PyList_New(object);
			}
			case type.table{ 
			
				if(object[["pyObject"]] ){
					if( object.checkList() ){
						this[["pyObject"]] = object[["pyObject"]];
						..py2.IncRef(this.pyObject);
					}
					else {
						var list =  ..py2.builtin.list(object);
						if(list.checkList()){
							this[["pyObject"]] = list.stealPtr()
						}
						else {
							return null;
						}
					}
				}
			  	else{
					var len = #object;
					this.pyObject = PyList_New(len); 
					
					for(i=1;len;1)
						PyList_SetItem(this.pyObject,i-1,..py2.object(object[i]).stealPtr() );   
				}
			}
			else {
				error("pyObject构造参数不支持此数据类型:" + tt ,2);
			} 
		}
		
		..table.add_gc(this,"release");
	}
	@_metaProperty
}

namespace list {

	_metaProperty = ..util.metaProperty(   {
	
		_topointer = function(){
			if(!owner.pyObject) error("Python List已销毁",2);
			return owner.pyObject;
		} 
		
		parseValue = function(){
			var result = {}; 
			var len = PyList_Size(owner.pyObject);
			for(i=0;len-1;1){
				var item = PyList_GetItem(owner.pyObject,i);
				if(item){
					item = ..py2.object(  item,true );
					result[i+1] = item.parseValue();
					item.stealPtr();//因为item是借用，所以盗用还回去
				}
			}
			return result; 
		}
		  
		getItem = function(k){
			return owner[k]
		}  
		
		setItem = function(k,v){
			owner[k] = v;
		}
		
		append = function(v){
			if(v!==nul)PyList_Append(owner.pyObject,..py2.object(v) ); 
		}	
		
		__get = function(k,ownerCall){ 
			if( type(k) != type.number ) {
				return owner.getAttr(k); 
			}
			
			var item = PyList_GetItem(owner.pyObject,k);
			if(item){
				..py2.IncRef(item);//特例 borrow reference
				return ..py2.object(  item,true) ;
			} 
		}
		
		__set = function(k,v){
			if( type(k) != type.number ) {
				return null;
			}
			
			if(v===null)
				PyList_DelItem(owner.pyObject,k);
			else {
				if( type(v) == "pointer" ){
					..py2.IncRef(v);
					PyList_SetItem(this.pyObject,k,v );  
				}
				else{
					PyList_SetItem(owner.pyObject,k,..py2.object(v).stealPtr() ); 
				}
			} 
		}
		len = function(){
			return PyList_Size(owner.pyObject);
		}
		_type = "py2.list";
	} );
	..table.mix(_metaProperty,..py2.object._metaProperty); 
	
	PyList_New = ::Python2.api("PyList_New","pyObject(int size)")  
	PyList_GetItem = ::Python2.api("PyList_GetItem","pyObject(PyObject dp,INT key)")  
	PyList_SetItem = ::Python2.api("PyList_SetItem","pyObject(PyObject dp,INT key,pyObject item)") 
	PyList_Append = ::Python2.api("PyList_Append","pyObject(PyObject dp,pyObject item)")  
	PyList_Size = ::Python2.api("PyList_Size","INT(PyObject dp)") 
}


/**intellisense()
py2.list( = 创建新的列表\n此对象继承自pyObject(py2.object)\n一般不需要手动创建此对象,aardio会在传参数时自动转换
py2.list(.(列表长度) = 创建新的列表\n也可以省略参数
py2.list(.(pyObject指针) = 创建新的python列表,\n不会添加引用计数,但对象销毁时负责释放引用计数
py2.list(.(pyObject对象) = 如果传入 Python 对象是一个 list,\n返回绑定相同对象的 py2.list 对象,添加引用计数,对象销毁时负责释放引用计数\n否则将传入对象作为 python 内置函数 list 的参数并返回 py2.list 对象\n失败返回 null
py2.list(.(aardio数组) = 参数传入aardio数组,\n创建并返回新的的python列表\n注意 python中下标自0开始,而aardio中下标是自1开始
!py2List.stealPtr() =  接管此对象的指针并盗用一次引用计数\n原对象的内部指针被清空,并不再负责释放引用计数\n steal references
!py2List.parseValue() = 转换为aardio数组
!py2List.type() = 返回类型名字
!py2List.has("__/*属性名*/") = 是否存在指定的属性
!py2List.getAttr("__/*属性名*/") = 读属性成员,也可以用成员操作符获取\n属性值为 py.object 对象
!py2List.setAttr("__/*属性名*/",) = 写属性成员的值,也可以用成员操作符赋值
!py2List.getAttr() = !pyObject.
!py2List.getItem(__/*索引*/) = 返回指定项,类似在python中使用下标操作符取值
!py2List.setItem(__/*索引*/，) = 修改指定项,类似在python中使用下标操作符赋值
!py2List.getItem() = !pyObject.
!py2List.toString() = 转换为 aardio 字符串\n也可以直接将对象作为参数传入 tostring 函数转换为字符串
!py2List.toTuple() = 转换为 Python 元组\n!py2Tuple.
!py2List.toList() = 转换为 Python 列表\n!py2List.
!py2List.checkList() = 检测是否列表
!py2List.each() = @for( item in ??.each() ){\n	__/*创建迭代器用于遍历所有的项,返回一个值*/\n}\n!py2Object.
!py2List.? = !py2Object.
py2.list() = !py2List. 
end intellisense**/