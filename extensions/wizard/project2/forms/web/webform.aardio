import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio form";right=759;bottom=469;parent=...)
winform.add()
/*}}*/

import web.form;
var wb = web.form( winform,5/*_UIFLAG_DIALOG*/,,,true);
wb.noScriptErr = true;

wb.html = /** 
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />  
    <title></title>
</head>
<body style="white-space:pre;font-size:	11pt;word-wrap: break-word;word-break: normal;">
<pre>aardio 中的 web.form 使用系统自带的 IE 浏览器控件。
因为 IE 浏览器控件存在一定的局限性, 主界面建议使用 aardio 实现以减轻网页的负担。
有局限不等于就要低估 IE 浏览器控件的价值, 传统控件更加有局限, 但我们仍然会大量的使用。

IE 浏览器控件为系统核心组件,即使移除 IE 仍然可以继续使用 IE 浏览器控件。
所以使用 web.form 生成的软件非常小。aardio 提供的 web.form 接口也非常简洁。
使用 aardio 与 JS 交互可以直接地互调函数, 非常方便。

这个范例使用了 React 的兼容实现 NervJS，
可以支持 IE9, IE10, IE11, 范例中演示了 React Hooks 的用法。
React Hooks 简洁优雅, 大幅降低了前端开发的门槛和学习成本。

请先安装 Node.js 以及 VS Code开发环境。
然后使用此向导新建工程，在工程视图的「网页源码」目录点右键,
然后在弹出菜单中点击「使用外部编辑器打开」, aardio 会自动调用 VS Code 打开目录。
然后在 VS Code 的终端中输入命令 npm install 安装依赖, 
输入命令 npm run build 编译并生成 JS 代码。

注意工程在发布后不再需要网页源码, 可以直接生成独立的 EXE 文件。

</pre>

</body>
</html>
**/

winform.getTemplatePath = function(){
	return io.fullpath("/template/web/webform/") 
}

winform.show(true);
win.loopMessage();
return winform;
