import win.ui;
/*DSG{{*/
var winform = win.form(text="嵌入 AutoHotkey 演示";right=599;bottom=399)
winform.add(
edit={cls="edit";left=17;top=18;right=565;bottom=374;edge=1;multiline=1;z=1}
)
/*}}*/

import ahk; 

//直接定义允许 AHK 调用的aardio函数（函数名以on开头）
ahk.onTest = function(param){
	winform.show();
    winform.edit.print( "winform.onTest被ahk调用",param ); 
}

/*
aardio 中路径以斜杆开始表示应用程序根目录，
应用程序根目录在开发时指工程目录或工程外独立启动的文件所在目录，发布后指 EXE 所在目录。
以下代码导入 \AutoHotkey\Lib\path\libName.ahk ，自动转存为 %A_MyDocuments%\AutoHotkey\Lib\path\libName.ahk ，
支持 aardio 内嵌资源目录（要创建工程）下的文件，可生成独立 EXE 文件。
*/
//ahk.import("path/libName"); //在 AHK 中可以使用 #include <path/libName> 引用。

//运行ahk代码，应用程序根目录已设为 AHK 工作目录 %A_WorkingDir% 
ahk.run( `
#Persistent ;保持ahk线程不退出
#NoTrayIcon ;不显示托盘图标
#include <aardio>  ;启动ahk代码中必须加入这句才能与aardio交互

; AHK 默认是局部变量，定义全局变量要用 global 语句，aardio 则是默认全局变量，定义局部变量要用 var 语句
global gVar := "<?="允许嵌入 aardio 代码"?>"  ;  参考 https://bbs.aardio.com/doc/reference/the%20language/template_syntax.html

; 定义函数与 aardio 有点像，aardio 一般会写为 GetPoint = function(hwnd){ return value;}
GetPoint(hwnd){   
    
    ; 命令式语法 = 号后面是字符串，变量要放到百分号里
    POINT_TYPE =  
    (
        UInt x;
        UInt y;
    ) ; 首尾两个括号都必须独占一行，用于包含多行字符串
     
    
    ; 新语法 := 后面是表达式,和其他编程语言类似字符串放引号里,变量不用放百分号里
    point := Struct( POINT_TYPE ) ; 参考 https://hotkeyit.github.io/v1/docs/commands/Struct.htm
    
    ; 取结构体指针，aardio 里调用 API 时结构体总是自动转为指针，不需要写这些代码
    ptr := point[]
   
    ; DllCall("user32.dll\GetCursorPos", "Ptr", ptr)   
    GetCursorPos(ptr) ; 参考 https://hotkeyit.github.io/v1/docs/commands/WinApi.htm

    ; 直接调用aardio函数，支持任意类型、不定个数的调用参数
    aardio.onTest({ x : point.x, y : point.y })

	; 命令式语法, 百分号加一个空格表示后面是表达式
	MsgBox, % "x:" point.x ",y:" point.y

    return { x : point.x, y : point.y }
}`);

//直接修改ahk全局变量的值
ahk.setGlobal("gVar","测试一下")
 
/*
直接调用ahk里定义的全局函数，
参数和返回值自动支持各种数据类型，就像调用普通aardio函数。
是不是很神奇？！
*/
var point = ahk.GetPoint(ahk.external.hwnd);
winform.edit.print("调用ahk函数的返回值：",point);

// 当然上面的代码用aardio直接写会更简单，例如：
var point = {int x;int y};

//不用声明直接调用 API，aardio 结构体会在调用 API 时会自动转换为指针
::User32.GetCursorPos(point); //不用写参数类型这些，直接使用 API  函数。

//显示返回值
winform.edit.print(point.x,point.y);

win.loopMessage(); 