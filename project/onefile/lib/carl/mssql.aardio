//mssql 数据库
namespace carl

mssql = class {
	ctor( server,database,uid,pwd ){
		var conn,err;
		try{
			 conn,err = sqlServer( ["Data Source"] = server;["Database"] = database;["User ID"] = uid;["Password"] = pwd; )
		}
		catch(e){
			err = e;
		}
		if( conn ){
			this.conn = conn;
		}else {
			return null,err; 
		}
	};
	
	regetTable = function(sql,...){//重写原库getTable函数
		var rs,err = this.conn.openRecordSet(sql,,,...);
		if(!rs) return null,err;
		
		var fields = {};
		for( i=1;rs.Fields.Count ){
			fields[i] = rs.Fields(i-1).Name; 
		}
 
        var trim = string.trimright;
        var result = { fields = fields  };  
        var v;
        while(!rs.eof){
        	var row = {};  
        	for(i,name in fields){ 
        		v = rs( i-1 ).value;
        		if( type( v ) == "string" ) v = trim(v);
        		elseif(..time.istime(v)){//增加时间判断
        			v.format="%Y-%m-%d %H:%M:%S";
        			v = tostring(v);
        		}
        		if(#name) row[name] = v;
        		else row[i] = v;
        	}        	
        	table.push( result,row );
        	rs.movenext();
        }
		rs.close();
		return result;
	}
	
	exec = function(sql,...){//执行SQL或存储过程,无返回值
		var tab = {...};
		var ok,err;
		try{
			if( this.conn )
				ok,err = this.conn.exec(sql,table.unpack(tab));
		}
		catch(e){
			err = e;
		}
		return ok,err;
	}
	
	getTable = function(sql,...){//执行SQL,返回table记录集
		var tab = {...};
		var t,err;
		try{
			if( this.conn )
				t,err = this.regetTable(sql,table.unpack(tab)); 
		}
		catch(e){
			err = e;
		}
		if( type(t) != type.table ) t = null;
		return t,err;
	}
	
	getTableFirst = function(sql,...){//执行SQL,返回第一条记录
		var row,result,err,rs;
		var tp = {...}
		try{
			if( this.conn ){
				rs,err = this.conn.openRecordSet(sql,,,table.unpack(tp));
				if(!rs) return;
				
				var fields = {};
				for( i=1;rs.Fields.Count ){
					fields[i] = rs.Fields(i-1).Name; 
				}
        		var trim = string.trimright;
        		row = {};
        		if(!rs.eof){
        			var v;
        			for(i,name in fields){ 
        				v = rs( i-1 ).value;
        				if( type( v ) == "string" ) v = trim(v);
        				elseif(..time.istime(v)){//增加时间判断
        					v.format="%Y-%m-%d %H:%M:%S";
        					v = tostring(v);
        				}
        				if(#name) row[name] = v;
        				else row[i] = v;
        			}
        		}
        		rs.close();     		
			}
		}
		catch(e){
			err = e;
		}
		if( type(row) != type.table ) row = null;
		return row,err;
	}
	
	transaction = function( tsql, ... ){//事务执行
		if(!#tsql) return null,"无事务SQL语句";  
		var sql =/*
		SET NOCOUNT ON;
		BEGIN TRY
			BEGIN TRAN
			{sql}
			select 1 as Result
			COMMIT TRAN
			END TRY
		BEGIN CATCH  
			ROLLBACK TRAN  
			select -1 as Result,('事务失败,'+ ERROR_MESSAGE()) as Msg
		END CATCH  
 		*/
 		var str = (type.table == type(tsql)) ? string.join(tsql,'\r\n') : tsql;
 		if( ... ) str = sqlServer.formatSqlParameters(str, ...);
		sql = string.replace(sql,"@{sql}", str);
		var tab,err = this.getTable(sql);
		if(!tab) return null,err;
		if(tab[1]["Result"] == 1) return true; 
		return null,tab[1]["Msg"];
	}
	
	storedProcedures = function(name, ...){//执行存储过程,存储过程名称,参数(只能字符型)
		var t = {...};
		var re,err;
		try{
			this.spname(name);
			for(i=1;#t;1){
				this.spinput("@t" + tostring(i), t[i]);//输入参数	
			}
			re,err = this.spexec();//执行,返回table
		}
		catch(e){
			err = e;
		}
		return re,err;
	}
	
	spname = function(name){//存储过程
		this.conn.cmd = com.CreateObject("ADODB.Command") 
		this.conn.cmd.ActiveConnection = this.conn.connection;
		this.conn.cmd.CommandType = 4;
		this.conn.cmd.prepared = true;
		this.conn.cmd.CommandText = name;//存储过程函数名称
	}
	
	getRsTable = function(rs){
		var fields = {};
		for( i=1;rs.Fields.Count ){
			var name = rs.Fields(i-1).Name;
			fields[i] = #name ? name : i; 
		}
    	var trim = string.trimright;
    	var result = { fields = fields  };
    	var v;
    	while(!rs.eof){
        	var row = {};
        	for(i,name in fields){ 
        		if(type.number == type(name)){
        			v = rs( name-1 ).value;
        		}else {
        			v = rs( name ).value;
        		}
        		if( type( v ) == "string" ) v = trim(v);
        		elseif(..time.istime(v)){//增加时间判断
        			v.format="%Y-%m-%d %H:%M:%S";
        			v = tostring(v);
        		}
        		name = tostring(name);
        		row[name] = v;
        	}
        	table.push( result,row );
        	rs.movenext();
    	}
    	return result; 
	}
	
	//存储过程传入参数,需按顺序
	spinput = function(keyname,value,types = 0xC8/*_adVarChar*/){
		var size;
		if( types == 0xC8/*_adVarChar*/){
			value = tostring(value);
			size = #value+2;
		}
		this.conn.cmd.Parameters.Append(this.conn.cmd.CreateParameter(keyname,types,1/*_adParamInput*/,size,value));
	}

	//执行存储过程有返回记录集
	spexec = function(){
		var rs = this.conn.cmd.Execute();
		while(rs && !rs.State){
			rs = rs.NextRecordset();
		}
		if(!rs) return ;
		return this.getRsTable(rs); 
	}
	
	close = function(){
		if( this.conn )
			this.conn.close();
	}
	
}

namespace mssql{
	import sqlServer;
	import com;
	
	table = ..table;
	string = ..string;
}

/**intellisense()
carl.mssql = mssql数据库
carl.mssql( server,database,uid,pwd ) = 创建mssql数据库连接
carl.mssql() = !mssql.
!mssql.conn = 数据库连接句柄
!mssql.getTable(sql) = 返回查询结果集table对像\n每个元素代表一行,每行由N个键值对列组成,键fields为列名结果集
!mssql.getTableFirst(sql) = 执行SQL,返回第一条记录,空记录返回空table对像
!mssql.exec(sql) = 执行sql,成功返回ture,失败返回null,err
!mssql.transaction(tab) = 事务执行多个sql语句,参数table对像或sql语句,成功返回ture,失败返回null,err,说明:全部执行成功,或全部失败
!mssql.storedProcedures(name) = 执行存储过程,参数1:存储过程名称,参数2以后,是传存储过程函数参数(参数只能是字符型)
!mssql.close() = 关闭连接
end intellisense**/
