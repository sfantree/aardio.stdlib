

	class baseFun{
		ctor( baseForm ){
			baseForm = baseForm;
			//win = ..win;
			//math = ..math;
			
			//this.mouseSpeed = 10; 
			//定义获取鼠标的移动速度
			this.SystemParametersInfo = ::User32.api("SystemParametersInfoA","int(int uAction,int uParam,int &lpvParam,int fuWinIni)" )

			//拖动窗口时鼠标与窗口左上角的距离
			this.offSet = {
				x = 0;
				y = 0;
			}
			//防止窗体移除屏幕导致窗体白屏
			this.isRedraw = false;
			
			this.cusRect = baseForm.custom.getRect(true);
			this.rotateOn = false;
			this.angle = 0;
			this.saveAngle = 0;
			this.brush = gdip.solidBrush( 0xFFFFFFFF );
			
			//鼠标位置与图片左上角的距离
			this.distance = 0;
			this.resizeOn = false;
			
			this.mouseDown = false;
			this.winMin = false;
			this.minWidth = common.minSize;
			this.minHeight = common.minSize;
			
			this.copyPos = {
				w = 0;
				h = 0;
				offsetX = 0; //迷你窗口与原始窗口X方向上的距离
				offsetY = 0;
			}
			
			this.img = null; //缓存位图
			this.graphics = null; //以img作为画板
			
			this.tmid = null;  //定时器ID
		};
		type=me;
		/*对象的所有成员必须用分号分隔*/
		
		//移动窗口
		setNewPos = function(){
			//var x,y,w,h = baseForm.getPos();
			var mx,my = win.getMessagePos();
			baseForm.setPos(mx - this.offSet.x , my - this.offSet.y );
		}
		//单击弹起事件
		clickEvent = function(){
			
			if( !this.winMin ){
				var x,y,w,h = baseForm.getPos();
				this.copyPos.w = w;
				this.copyPos.h = h;	
			}
			
		}
		//双击事件
		doubleclickEvent = function(){
			//console.log("dbClick")
			if( this.winMin ){
				this.setToNormal();
				return ; 
			}
			var mx,my = win.getMessagePos();
			var x,y,w,h = baseForm.getPos();
			
			
			
			var myc,mxc = this.minHeight/2,this.minWidth/2;
			var posX,posY = 0,0;
			
			var t,r,b,l = y,x + w,y + h,x;
					
			if( mx + mxc > r ){
				posX = r - this.minWidth;
			}elseif ( mx - mxc < l ) {
				posX = l;
			}else {
				posX = mx - mxc;
			}
			
			if( my + myc > b){
				posY = b - this.minHeight;
			}elseif( my - myc < t ){
				posY = t;
			}else {
				posY = my - myc;
			}	
			this.copyPos.w = w;
			this.copyPos.h = h;
			this.copyPos.offsetX = posX - x;
			this.copyPos.offsetY = posY - y;
			
			baseForm.setPos( posX, posY,this.minWidth,this.minHeight );
			select( common.minType ) {
				case 1 {
				//显示点击点周围的内容,不缩放
					
					baseForm.custom.setPos( -this.copyPos.offsetX,-this.copyPos.offsetY );
					
				}
				case 2 {
				//显示缩略图
					baseForm.custom2.show();
					baseForm.custom2.setPos(0,0,this.minWidth,this.minHeight);
					
					baseForm.custom.show(false);
				}
			}
			if(common.isMinAlpha)
				baseForm.transparent( common.minAlpha );
			this.winMin = true;
		}
		//ESC事件
		escEvent = function(){
			if( this.winMin ){
				this.setToNormal();
			}else {
				var mx,my = win.getMessagePos();
				var x,y,w,h = baseForm.getPos();
				if( mx>x && mx<(x+w) && my>y && my<(my+h) )
					baseForm.close();
			}
		}
		//从Mini状态返回
		setToNormal = function(){
			var x,y = null,null;
			do{
				x,y = baseForm.getPos();
				if(!x ||!y){
					win.msgbox("x,y=",x,y)
				}
				
			}while( x == null || y == null )
			
			var px = x-this.copyPos.offsetX;
			var py = y-this.copyPos.offsetY;
			var pw = this.copyPos.w;
			var ph = this.copyPos.h;
			
			baseForm.setPos( px,py,pw,ph );
			select( common.minType ) {
				case 1 {
					
					baseForm.custom.setPos(0,0,pw,ph)
				}
				case 2 {
					baseForm.custom2.show(false);
					baseForm.custom2.setPos(0,0,this.minWidth,this.minHeight );
					
					baseForm.custom.show();
				}
			}
			if(common.isMinAlpha)
				baseForm.transparent(false);
			this.winMin = false;
		}
		//判断单双击
		clickOrDblClk = function(){
			if( !this.tmid ){
				this.mouseDown = false;
				win.releaseCapture();
				this.tmid = baseForm.addtimer(
					300/*毫秒*/,
					function(hwnd,msg,id,tick){
						this.clickEvent();
						this.tmid = null;
						return false;
					}
				);
			}else {
				baseForm.killtimer(this.tmid);
				this.doubleclickEvent();
				this.tmid = null;
			}
		}

		noImg = function(w,h){
			//var w = cusRect.right - cusRect.left;
			//var h = cusRect.bottom - cusRect.top;
			this.img = gdip.bitmap( w,h );
			this.graphics = gdip.graphics( this.img );
		}
		
		//为了模拟绕中心旋转,取得画布平移的XY
		//思路:知道两点坐标,可获取中点坐标
		getOffsetXY = function( w,h,angle ){
			
			var sinA = math.sin(math.rad(angle));
			var cosA = math.cos(math.rad(angle));
			
			var x =  (w*cosA-h*sinA)/2 ;
			var y =  (w*sinA+h*cosA)/2 ;
			
			x = w/2 - x;
			y = h/2 - y;
			
			return x,y; 
		}
		//鼠标绕图片中心旋转时相比上一次移动的角度
		//很大程度是旋转1°
		offsetAngle = function(cusRect,mx,my){
			var x = mx - (cusRect.right+cusRect.left)/2;
			var y = my - (cusRect.bottom+cusRect.top)/2;
			var newAngle = math.round( math.deg(math.atan2(y,x)))
			var offsetAngle = newAngle - this.angle;	
			this.angle = newAngle;
			return offsetAngle; 
		}
		//绘制图片
		draw = function( msg,p,bmp ){
			
			gdi.windowBuffer( baseForm.custom.hwnd,
	    		function( hdc,hMemDc,hMemBitmap,width,height ){
	    			
	    			var g = gdip.graphics(hMemDc)
	    			g.compositingQuality = 2/*_GdipCompositingQualityHighQuality*/ ;
	        		g.smoothingMode = 2/*_GdipSmoothingModeHighQuality*/ ;
	    			select( msg ) {
	    				case "rotate" {
	    					this.graphics.fillRectangle(this.brush,0,0,bmp.width,bmp.height)
							this.graphics.rotate( p.angle, 1/*_MatrixOrderAppend*/ )
							this.graphics.translate( p.tsltX,p.tsltY, 1/*_MatrixOrderAppend*/)
							this.graphics.drawImageRect(bmp,0,0,bmp.width,bmp.height)
							g.setClipRect(0,0,width,height);
							g.drawImageRect(this.img,0,0,width,height)
	    					
	    				}
	    				case "room" {
	    					this.graphics.drawImageRect(bmp,0,0,bmp.width,bmp.height)
							g.drawImageRect(this.img,0,0,width,height)
	    				}
	    				case "flip" {
	    					bmp.rotateFlip( p );
	    					baseForm.custom.image = bmp.copyHandle();
	    					
	    					this.graphics.fillRectangle(this.brush,0,0,bmp.width,bmp.height)
	    					var a = -2*this.saveAngle;
	    					var tsltX,tsltY = this.getOffsetXY( bmp.width,bmp.height,a );
							this.graphics.rotate( a, 1/*_MatrixOrderAppend*/ )
							this.graphics.translate( tsltX,tsltY, 1/*_MatrixOrderAppend*/)
							
	    					this.graphics.drawImageRect(bmp,0,0,bmp.width,bmp.height)
							g.drawImageRect(this.img,0,0,width,height)
							this.saveAngle = -1*this.saveAngle;
	    				}
	    				case "redraw" {
	    						
							g.drawImageRect(this.img,0,0,width,height)
	    				}
	    				case "reset" {				
	    					this.graphics.drawImageRect(bmp,0,0,bmp.width,bmp.height);
							g.drawImageRect(this.img,0,0,width,height);
							
	    				}
	    			}
					g.delete();
	        		::BitBlt(hdc, 0, 0, width, height, hMemDc, 0, 0, 0xCC0020/*_SRCCOPY*/);
	    		}
			)
		}
		//重置旋转\缩放
		resetImg = function( msg ){
			if( this.winMin && !this.isRedraw )
				return ; 
			var bmp = gdip.bitmap(baseForm.custom.image);
			select( msg ) {
				case "a" {
					this.noImg(bmp.width,bmp.height);
					this.draw( "reset",,bmp );
					baseForm.custom.setPos(,,bmp.width,bmp.height);  //这里窗口会闪烁
					baseForm.setPos(,,bmp.width,bmp.height);  //这里窗口会闪烁
					this.saveAngle = 0;
				}
				case "r" {
					this.noImg(bmp.width,bmp.height);
					this.draw( "reset",,bmp );
					this.saveAngle = 0;
				}
				case "s" {
					this.draw( "reset",,bmp );
					baseForm.custom.setPos(,,bmp.width,bmp.height);  //这里窗口会闪烁
					baseForm.setPos(,,bmp.width,bmp.height);  //这里窗口会闪烁
				}
			}
			
			bmp.dispose();
		}
		
		//翻转图片
		flip = function( msg ){
			if( this.winMin )
				return ; 
			var bmp = gdip.bitmap(baseForm.custom.image);	
			if( !this.img )
				this.noImg(bmp.width,bmp.height);

			select( msg ) {
				case "h" {
					this.draw( "flip",4/*_RotateNoneFlipX*/,bmp );
				}
				case "v" {
					this.draw( "flip",6/*_RotateNoneFlipY*/,bmp );
				}
			}
			bmp.dispose();
		}
		
		//鼠标绕图片中心旋转
		rotateByMouse = function(){
			this.isRedraw = true;
			this.cusRect = baseForm.custom.getRect(true);
			
			var bmp = gdip.bitmap(baseForm.custom.image);
			if( !this.img )
				this.noImg(bmp.width,bmp.height);
			
			
			
			//一定程度避免重复计算
			//顺时针旋转1°画布平移的x,y值
			var tsltX,tsltY = this.getOffsetXY( bmp.width,bmp.height,1 );
			//逆时针旋转1°画布平移的x,y值
			var negTsltX,negTsltY = this.getOffsetXY( bmp.width,bmp.height,-1 );
			
			

			this.rotateOn = true;
			
			//获得当前鼠标速度以便恢复
			//var rs,lpvParam = this.SystemParametersInfo(0x70/*_SPI_GETMOUSESPEED*/,0,0,0)
			//this.mouseSpeed = common.mouseSpeed;
			if( common.mouseSpeed ){
				//降低鼠标速度
				::User32.SystemParametersInfo(0x71/*_SPI_SETMOUSESPEED*/,0,common.lowMouseSpeed,0)
			}
			var mx,my = win.getMessagePos();
		
			var x = mx - (this.cusRect.right+this.cusRect.left)/2;
			var y = my - (this.cusRect.bottom+this.cusRect.top)/2;
			this.angle = math.round( math.deg(math.atan2(y,x)))
			
			
			
			var hk = mouse.hook();
			hk.proc = function(msg,x,y,mouseData,injected,flags,timeStamp,extraInfo){
				if( injected ) return;	 
    			select(msg) {
    				case 0x201/*_WM_LBUTTONDOWN*/{
    	    			this.rotateOn = false;
    	    			hk.close();
    	    			bmp.dispose();
    	    			if( common.mouseSpeed )
    	    				::User32.SystemParametersInfo(0x71/*_SPI_SETMOUSESPEED*/,0,common.mouseSpeed,0);
    	    			
    	    			return true; 
    				}
    				case 0x200/*_WM_MOUSEMOVE*/{
    					if( this.rotateOn ){
							var offsetAngle = this.offsetAngle( this.cusRect,x,y );
							
							var prama = {
								["angle"] = offsetAngle;
							};
							select( offsetAngle ) {
								case 1 {
									prama = {
										["angle"] = 1;
										["tsltX"] = tsltX;
										["tsltY"] = tsltY;
									}	
									this.draw( "rotate",prama,bmp );
									this.saveAngle += offsetAngle;
									if(this.saveAngle > 359){
										this.saveAngle = 0;
									}
									//..io.print(this.saveAngle,offsetAngle)
								}
								case -1 {
									prama = {
										["angle"] = -1;
										["tsltX"] = negTsltX;
										["tsltY"] = negTsltY;
									}
									this.draw( "rotate",prama,bmp );
									this.saveAngle += offsetAngle;
									if(this.saveAngle > 359){
										this.saveAngle = 0;
									}
									//..io.print(this.saveAngle,offsetAngle)
								}
								//case !0 {
								//	prama.tsltX,prama.tsltY = this.getOffsetXY( bmp.width,bmp.height,offsetAngle );
								//	this.draw( "rotate",prama,bmp );
								//}
							}
							
						}
    				}  
    			}   
			}
		}
		//鼠标缩放
		resizeByMouse = function(){
			this.isRedraw = true;
			this.cusRect = baseForm.custom.getRect(true);
			var bmp = gdip.bitmap(baseForm.custom.image);
			if( !this.img )
				this.noImg(bmp.width,bmp.height);
			var mx,my = win.getMessagePos();

			
			this.distance = math.round( math.sqrt( (this.cusRect.left-mx)**2+(this.cusRect.top-my)**2 ) );
			
			
			
			this.resizeOn = true;
			var hk = mouse.hook();
			hk.proc = function(msg,x,y,mouseData,injected,flags,timeStamp,extraInfo){
				if( injected ) return;	 
    			select(msg) {
    				case 0x201/*_WM_LBUTTONDOWN*/{
    	    			this.resizeOn = false;
    	    			hk.close();
						bmp.dispose();
    	    			return true; 
    				}
    				case 0x200/*_WM_MOUSEMOVE*/{
    					if(this.resizeOn){
							var d = math.round( math.sqrt( (x-this.cusRect.left)**2+(y-this.cusRect.top)**2 ) );
							
							var ratio = math.round( d/this.distance,2 );
							
							var	w = (this.cusRect.right - this.cusRect.left)*ratio;
							var	h = (this.cusRect.bottom - this.cusRect.top)*ratio;
							
							this.draw( "room",,bmp );
							baseForm.custom.setPos(,,w,h);  //这里窗口会闪烁
							baseForm.setPos(,,w,h);  //这里窗口会闪烁
							
						}
    				}  
    			}   
			}
		}
		saveAs = function(){
			import fsys.dlg;
			var tm = time.now();
			var name  = tostring(tm,"%m_%d_%Y_%H_%M_%S","chs");
			var path = fsys.dlg.save( "*.png|*.png|*.jpg|*.jpg|*.bmp|*.bmp","保存",,,,name )
		
			
			var bmp=gdip.bitmap( baseForm.custom.image );
			
			if(#path) {
			    bmp.save( path );
			}
		}
		copyToClip = function(){
			var img = null;
			
			var bmp=gdip.bitmap( baseForm.custom.image );
			img = bmp.copyHandle();
			
			import win.clip;
			
			win.clip.writeBitmap( img );
		}
		
		
		
		
	}
namespace baseFun{
	import win;
	import math;

	import mouse.hook;
	import time;
	import gdi;
	import gdip.bitmap;
	import gdip.solidBrush;
	import gdip.graphics;
	
	import common;
}
	
	
