// @Author  : popy32
// @Contact : 74o5o27o8#qq.com
// @File    : .aardio
// @Comment : 

// 2022-05-13 16:14 
// 设计一条连接能重复使用 

import debug;
import console;
import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio form";right=759;bottom=469)
winform.add(
button={cls="button";text="日志测试1";left=8;top=8;right=136;bottom=40;z=2};
edit={cls="edit";left=0;top=256;right=760;bottom=472;autohscroll=false;bgcolor=0;color=16777215;edge=1;multiline=1;z=1}
)
/*}}*/

import wsock.tcp.asynClient;
import wsock.tcp.asynServer;

// 日志输出
Logd = function(...){
    import time;
    var args = {...};
    var tm = time.now();
    tm.format = "[%Y/%m/%d %H:%M:%S] ";
    //
    var debugInfo = debug.queryinfo(2, "select source,function,upvars,name,currentline,activelines") ;
    winform.edit.log(tostring(tm), "line: ", debugInfo[['currentline']], " ", ..string.join(args,' '),'\r\n');
    // 滚动条随光标滚动
    winform.edit.scrollCaret();
}

// 测试当前目录
winform.button.oncommand = function(id,event){
    import fsys;
    import fsys.path;
    Logd("winform.button.oncommand", "fsys.getCurDir()", fsys.getCurDir());
    Logd("winform.button.oncommand", "io._exepath", io._exepath);
    Logd("winform.button.oncommand", 'io.fullpath("/")', io.fullpath("/") );
    Logd("winform.button.oncommand", 'io.fullpath("~")', io.fullpath("~") );
}

class tunnel {
	ctor(SrcIp, SrcPort, DstIp, DstPort){
	    this.localServerClient = {};
	    
	};
	
	start = function(){
		
	}
	
	
	
}



winform.show();
win.loopMessage();


SRC_IP = "127.0.0.1";
SRC_PORT = 5000;
DST_IP = "192.168.1.104";
DST_PORT = 2288;

// 转发器 监听
m_localServer = wsock.tcp.asynServer();
// 转发器连接远程
m_remoteClient = wsock.tcp.asynClient();

/*
m_server_connect = false;
m_remote_connect = false;

m_remote_connect = true;
m_server_connect =  true;

m_server_socket = -1;

m_start_buffer = "";
*/

// 转发器 监听 连接的socket
m_localClient = null;
m_remote_connect = false;

m_local_connect = false;

// 连接转发器
m_localServer.onOpen = function(hSocket, err) {
	// ..console.dump("onOpen",this.cc,..table.count(this.proxy))
	Logd("m_localServer.onOpen", ..table.count(m_localServer.proxy));
    //var client = ??.client(hSocket);
    
    //m_server_socket = hSocket;
    m_localClient = m_localServer.client(hSocket);
    
    var client = wsock.tcp.client(hSocket);
    client.writeBuffer(m_start_buffer,#m_start_buffer);
    
    m_local_connect = true;
    
}

m_localServer.onRead = function(hSocket,err){
    var client = m_localServer.client(hSocket);
    var str = client.readAll();
    while(not m_remote_connect){
        ..win.delay(,20)
    }
    m_remoteClient.write(str);
}

/*
m_localServer.onReceive = function(hSocket,err){
	
    //var client = ??.client(hSocket);
    
    if(not m_remote_connect) {
        return;
    }
    
    
    var client = wsock.tcp.client(hSocket);
    
    var buffer = raw.buffer(0x10000);
    //var buffer = m_server.recv();
    var readSize = client.recvBuffer(buffer);
    
    m_remote.writeBuffer(buffer,readSize);
    //m_remote.send(buffer);
    
    //Logd("m_server.onReceive", string.hex(buffer));
}
*/

m_localServer.onSend = function(hSocket,err){
    Logd("m_server.onSend", ..string.hex(""));
}

// 断开转发器
m_localServer.onClose = function(hSocket,err) {
    //var client = ??.client(hSocket);
    //m_remote.close();
}

// 远端 发给 转发器
/*
m_remote.onReceive = function(err){
	Logd("m_remote.onReceive");
	// var buffer = m_remote.recv();
    //m_server.send(buffer);
    
    
    
    //var client = wsock.tcp.client(hSocket);
    
    var buffer = raw.buffer(0x10000);
    var readSize = m_remote.recvBuffer(buffer);
    //var cls = m_server.clients;
    //console.dump(cls);
    //var c ;
    //for(k,v in cls){
    //	c = v;
    //}
    
    if(not m_server_connect) {
        m_start_buffer = m_start_buffer ++ raw.str(buffer);
        return;
    }
    
    
    //c.writeBuffer(buffer,readSize);
    
    var hSocket = m_server_socket;
    var client = wsock.tcp.client(hSocket);
    client.writeBuffer(buffer,readSize);
}
*/

m_remoteClient.onSend = function(err){
	Logd("remoteClient.onSend");
}

// 转发器成功连接到远端
m_remoteClient.onConnect = function(err){
	Logd("remoteClient.onConnect");
	// 远端连接标志
	m_remote_connect = true;
}

// 转发器 远端 断开
m_remoteClient.onClose = function(err){
    Logd("remoteClient.onClose");
    m_remote_connect = false;
    m_localClient.close();
    m_localClient = null;
}

// 远端 发给 转发器
m_remoteClient.onRead = function(err){
    var str = m_remoteClient.readAll();
    while(not m_local_connect){
        ..win.delay(,20)
    }
    m_localClient.write(str);
}

//console.open();

m_remoteClient.connectTimeout(DST_IP, DST_PORT);
m_localServer.start(SRC_IP, SRC_PORT);




//console.open();


