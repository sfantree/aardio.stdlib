import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio form";right=759;bottom=469)
winform.add(
button={cls="button";text="输出html格式文档";left=56;top=384;right=184;bottom=424;z=2};
custom={cls="custom";text="自定义控件";left=296;top=72;right=720;bottom=400;border=1;z=1}
)
/*}}*/

import console;
// import ide.doc.markdown;
import string.markdown;




import ide.doc;
namespace ide.doc {

class markdown2{
	ctor( fullpath ){ {
	
			var kernelLibName;
			var kernel = {table=1;string=1;raw=1;io=1;com=1;math=1;time=1;thread=1;fiber=1;global=1;kernel=1 };
			if( kernel[fullpath] ){
				kernelLibName = fullpath;
				fullpath = "kernel";
			}
			else{
				if( fullpath == "win.form" ) fullpath = "win.ui";
				
				if( !..io.exist(fullpath) && ..string.match(fullpath,"^[a-zA-Z][\w\.]+$") ){
					var p = fullpath;
					fullpath = ..io.libpath(p);
					if(!fullpath){
						fullpath = ..io.libpath("win.ui.ctrl." + p);
					}
				}
				if( !..io.exist(fullpath) ) return;
			}
			
           	this = ..ide.doc( fullpath ); 
           	if(!this) return;
           	
           	if( kernelLibName ){
           		var sections = { 
           			[kernelLibName] = this.sections[kernelLibName]; 
           			[kernelLibName+"Object"] = this.sections[kernelLibName+"Object"]; 
           		}; 
           		
           		if(kernelLibName=="global"){
           			sections["logfontObject"] = this.sections["logfontObject"]; 
           		};
           		if(kernelLibName=="raw"){
           			sections["dllModuleObject"] = this.sections["dllModuleObject"]; 
           		};
           		if(kernelLibName=="com"){
           			sections["comVariantObject"] = this.sections["comVariantObject"]; 
           			sections["comtypelibObject"] = this.sections["comtypelibObject"]; 
           			sections["comtypeinfoObject"] = this.sections["comtypeinfoObject"]; 
           			sections["embedObject"] = this.sections["embedObject"]; 
           		};
           		if(kernelLibName=="math"){
           			sections["mathSize64Object"] = this.sections["mathSize64Object"];
           		};
           		
           		this.sections = sections;
           		
           		if(kernelLibName!="global") {
           			this.define = null;this.const = null;
           		}
           		
           		this.libPath = kernelLibName;
           		this.fileName = kernelLibName;
           		this.filePath = kernelLibName;
           	}
           	
           	
           	var tOutput = {};
			..table.push(tOutput,this.libPath,"帮助文档",'\r\n'
				,"===========================================");

			var sortNames;
			if( this.libPath ) {
				sortNames = { this.libPath;this.libPath + "Object"};
				var h = ..string.match(this.libPath,"^[^.]+");
				if( h != this.libPath ) ..table.unshift(sortNames,h);
				if( this.libPath == "win.ui" ) sortNames = { "win.ui";"win.form";"winform"};
				elseif( this.libPath == "web.form" ) sortNames = { "web";"web.form";"wb"};
				elseif( this.libPath == "web.layout" ) sortNames = { "web.layout";"wbLayout"}; 
				elseif(  ..string.startWith(this.libPath,"win.ui.ctrl.",true) ){
					sortNames = { "win.ui.ctrl";..string.match(this.libPath,"[^.]+$") + "Object"}; 
				}
			};
			
			for(path,section in ..table.eachName(this.sections,,sortNames)){
					if(!..table.next(section) ) continue;
					
					..table.push(tOutput, '\r\n<a id="',(#path? path : "global"),'"></a>\r\n',#path? path : "全局对象",' 成员列表\r\n'
						,"-------------------------------------------------------------------------------------------------"
						,'\r\n');
					 
					if( section[path] ){ 
						var v = section[path];
						if( ..string.startWith(v,path) ){
							v = ..string.right(v,-(#path+1));
						}
						..table.push(tOutput,v,'\r\n');
						section[path] = null;
					}
					 
					if( path == "global" ){
           				for(k,v in ..table.eachName(section)){  
           					if( globalkw[[k]] ) continue;
           					if( ..io.libpath(k) ) continue;
           					
							..table.push(tOutput,'\r\n<h6>',k,' </h6>\r\n ');
							..table.push(tOutput, v,'\r\n' ); 
			  			} 
           			}
           			else {
           				for(k,v in ..table.eachName(section)){  
							..table.push(tOutput,'\r\n<h6>',k,' </h6>\r\n ');
							..table.push(tOutput, v,'\r\n' ); 
			  			} 
           			}
			}  
 
			if( this.const ){
				..table.push(tOutput,  '\r\n\r\n',"全局常量",'\r\n'
					,"-------------------------------------------------------------------------------------------------"
					,'\r\n');
					
				for(k,v in ..table.eachName(this.const)){ 
           			if( ..io.libpath(k) ) continue;
           			
					..table.push(tOutput,'\r\n<h6>',k,' </h6>\r\n ');
					..table.push(tOutput, v,'\r\n' ); 
			  	}
			}
			
			if( this.define ){
				..table.push(tOutput,  '\r\n\r\n',"自动完成常量",'\r\n'
					,"-------------------------------------------------------------------------------------------------"
					,'\r\n');
				for(k,v in ..table.eachName(this.define)){ 
					if( ..string.indexOf(v,'\n') ) continue ;
					..table.push(tOutput,k,"=",v,'  \r\n');
				}
			}
			
			this.outputString = ..string.join(tOutput);
	} };
	@_meta;
}

namespace markdown2{
	_meta = {
		_tostring = function(){
			return owner.outputString;
		} 
	}
	
	globalkw = {
		["and"] = 1;["or"] = 1;["not"] = 1;["class"] = 1;["function"] = 1;["if"] = 1;["for"] = 1;["while"] = 1;["do"] = 1;["do_while_false"] = 1;["do_标记"] = 1;
		["break"] = 1;["continue"] = 1;["else"] = 1;["elseif"] = 1;["begin"] = 1;["end"] = 1;["true"] = 1;["false"] = 1;["if"] = 1;["import"] = 1;["intellisense代码模式"] = 1;
		["intellisense注释模式"] = 1;["this"] = 1;["owner"] = 1;["global"] = 1;["self"] = 1;["null"] = 1;["select"] = 1;["forin"] = 1;["trycatch"] = 1;["try"] = 1;["return"] = 1;
		["var"] = 1;["def"] = 1;["protobuf"] = 1;["zeromq "] = 1;["while_var"] = 1;["while_标记"] = 1;
	}
}

/*intellisense(ide.doc)
markdown(.("库路径") = 返回对象可使用tostring函数转换为Markdown格式文档\n参数可以是库完整路径或名字空间
markdown() = !libDocument.
end intellisense*/

}














import web.form;
var wb = web.form( winform.custom, , ,,true); 
wb.noScriptErr = true;

wb.external={
	saveHtmlFile = function(){
		//winform.btnSaveHtml.oncommand();
	}
}

wb.html = /**
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title></title>
<style type="text/css">
body {
    font-family: Helvetica, arial, sans-serif;
    font-size: 10.5pt;
    line-height: 1.6;
    padding-top: 10px;
    padding-bottom: 10px;
    background-color: white;
    padding: 30px; 
}
body > *:first-child {
    margin-top: 0 !important; 
}
body > *:last-child {
    margin-bottom: 0 !important; 
}
a {
    color: #4183C4; 
}
a.absent {
    color: #cc0000; 
}
a.anchor {
    display: block;
    padding-left: 30px;
    margin-left: -30px;
    cursor: pointer;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0; 
}
h1, h2, h3, h4, h5, h6 {
	line-height: 1.5em;
    margin: 20px 0 10px;
    padding: 0;
    font-weight: bold;
    -webkit-font-smoothing: antialiased;
    cursor: text;
    position: relative; 
}
h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
    text-decoration: none; 
}
h1 tt, h1 code {
    font-size: inherit; 
}
h2 tt, h2 code {
    font-size: inherit; 
}
h3 tt, h3 code {
    font-size: inherit; 
}
h4 tt, h4 code {
    font-size: inherit; 
}
h5 tt, h5 code {
    font-size: inherit; 
}
h6 tt, h6 code {
    font-size: inherit; 
}
h1 {
    font-size: 18pt;
    color: black; 
    border-bottom: none;
	padding-bottom: 3px;
	text-align:center;
}
h2 {
    font-size: 13.5pt;
    border-bottom: 3px solid #aaa;
    color: #444;
}
h3 {
    font-size: 12.7pt; 
    border-bottom: 2px solid #aaa;
    color: #555;
}
h4 {
    font-size: 16px; 
    border-bottom: 1px solid #aaa;
    color: #666;
}
h5 {
    font-size: 15px; 
    border-bottom: 1px dotted #aaa;
    color: #777;
}
h6 {
    font-size: 14px; 
    border-bottom: 1px dotted #793862;
    color: #793862;
}
p, blockquote, ul, ol, dl, li, table, pre {
    margin: 15px 0; 
}
hr {
    border: 0 none;
    color: #cccccc;
    height: 4px;
    padding: 0; 
}

body > h2:first-child {
    margin-top: 0;
    padding-top: 0; 
}
body > h1:first-child {
    margin-top: 0;
    padding-top: 0;
}
body > h1:first-child + h2 {
    margin-top: 0;
    padding-top: 0; 
}
body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
    margin-top: 0;
    padding-top: 0; 
}
a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
    margin-top: 0;
    padding-top: 0; 
}
h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
    margin-top: 0; }

li p.first {
    display: inline-block; 
}
ul, ol {
    padding-left: 30px; 
}
ul :first-child, ol :first-child {
    margin-top: 0; 
}
ul :last-child, ol :last-child {
    margin-bottom: 0; 
}
dl {
    padding: 0; 
}
dl dt {
    font-size: 14px;
    font-weight: bold;
    font-style: italic;
    padding: 0;
    margin: 15px 0 5px; 
}
dl dt:first-child {
    padding: 0; 
}
dl dt > :first-child {
    margin-top: 0; 
}
dl dt > :last-child {
    margin-bottom: 0; 
}
dl dd {
    margin: 0 0 15px;
    padding: 0 15px; 
}
dl dd > :first-child {
    margin-top: 0; 
}
dl dd > :last-child {
    margin-bottom: 0; 
}
blockquote {
    border-left: 4px solid #dddddd;
    padding: 0 15px;
    color: #777777; 
}
blockquote > :first-child {
    margin-top: 0; 
}
blockquote > :last-child {
    margin-bottom: 0; 
}
table {
    padding: 0; 
}
table tr {
    border-top: 1px solid #cccccc;
    background-color: white;
    margin: 0;
    padding: 0; 
}
table tr:nth-child(2n) {
    background-color: #f8f8f8; 
}
table tr th {
    font-weight: bold;
    border: 1px solid #cccccc;
    text-align: left;
    margin: 0;
    padding: 6px 13px; 
}
table tr td {
    border: 1px solid #cccccc;
    text-align: left;
    margin: 0;
    padding: 6px 13px; 
}
table tr th :first-child, table tr td :first-child {
    margin-top: 0; 
}
table tr th :last-child, table tr td :last-child {
    margin-bottom: 0; 
}
img {
    max-width: 100%; 
}
span.frame {
    display: block;
    overflow: hidden; 
}
span.frame > span {
    border: 1px solid #dddddd;
    display: block;
    float: left;
    overflow: hidden;
    margin: 13px 0 0;
    padding: 7px;
    width: auto; 
}
span.frame span img {
    display: block;
    float: left; 
 }
span.frame span span {
    clear: both;
    color: #333333;
    display: block;
    padding: 5px 0 0; 
}
span.align-center {
    display: block;
    overflow: hidden;
    clear: both; 
}
span.align-center > span {
    display: block;
    overflow: hidden;
    margin: 13px auto 0;
    text-align: center; 
}
span.align-center span img {
    margin: 0 auto;
    text-align: center; 
 }
span.align-right {
    display: block;
    overflow: hidden;
    clear: both; 
}
span.align-right > span {
    display: block;
    overflow: hidden;
    margin: 13px 0 0;
    text-align: right; 
}
span.align-right span img {
    margin: 0;
    text-align: right; 
}
span.float-left {
    display: block;
    margin-right: 13px;
    overflow: hidden;
    float: left; 
}
span.float-left span {
    margin: 13px 0 0; 
}
span.float-right {
    display: block;
    margin-left: 13px;
    overflow: hidden;
    float: right; 
}
span.float-right > span {
    display: block;
    overflow: hidden;
    margin: 13px auto 0;
    text-align: right; 
}
code, tt {
    margin: 0 2px;
    padding: 0 5px;
    white-space: nowrap;
    border: 1px solid #eaeaea;
    background-color: #f8f8f8;
    border-radius: 3px; 
}
pre code {
    margin: 0;
    padding: 0;
    white-space: pre;
    border: none;
    background: transparent; 
}
.highlight pre {
    background-color: #f8f8f8;
    border: 1px solid #cccccc;
    font-size: 13px;
    line-height: 19px;
    overflow: auto;
    padding: 6px 10px;
    border-radius: 3px; 
}
pre {
    background-color: #f8f8f8;
    border: 1px solid #cccccc;
    font-size: 13px;
    line-height: 19px;
    overflow: auto;
    padding: 6px 10px;
    border-radius: 3px; 
}
pre code, pre tt {
    background-color: transparent;
    border: none; 
}
</style>
</head>
<body>
</body>
</html>	 
**/


var getAllAardio = function(objPath){
	var AardioFiles = {};
	fsys.enum( objPath, "*.aardio",
		function(dir, filename, fullpath, findData){ 
			if(filename){
				 table.push(AardioFiles, fullpath);
				 //handleLib(fullpath);
	           	//winform.edit.printf('%s\n', filename)
	        }
		},
		true
	);
	return AardioFiles;
}

//var result = getAllAardio("~/lib")
//console.dump(result);
import inet.url;
var handleLib = function(libPath){
    var markdown = string.markdown();
	if(..fsys.isDir(libPath) ) return;
	
	var doc = ide.doc.markdown2(libPath);
	while(!doc){
		libPath = ..string.match(libPath,"^(.+[^\.])\.[^\.]*$");
		if(!libPath) break;
		doc = ide.doc.markdown2(libPath);
	}
	
	if(!doc){ 
		//winform.msgboxErr("没有找到该支持库的有效文档");
		//winform.btnOpenMarkdown.disabled = false;
		return;
	}
	
	//winform.editMd.text = "";
	wb.body.innerHTML =  "";
	
	var str  = tostring(doc)
	//winform.editMd.text = str;
	
	
	
	// 需要url 编码
	
	var str2 = ( markdown.render( str));
	wb.body.innerHTML = str2; 
	
	
	//console.log(wb.body.innerHTML);
	//console.dump(wb.getElesByTag("h1"));
    //return;
	//config.libPath = winform.editLibPath.text;
	//winform.btnOpenMarkdown.disabled = false;
}

//console.pause();


import fsys;
import fsys.dlg.dir;
winform.button.oncommand = function(id, event){
    var path = fsys.dlg.dir(,winform,'请选择目录')
	//var path = fsys.dlg.save("HTML文件|*.html||","另存为HTML文件",,winform.hwnd)
	if(!path) return;
	
	var allLib = getAllAardio("~/lib");
	for(i=1;#allLib;1){
		handleLib(allLib[i]);
		var savename = string.format("%03d.html", i);
		
		if(io.exist(fsys.joinpath(path, savename))) {
		    continue;
		}
		string.save(fsys.joinpath(path, savename), wb.document.documentElement.outerHTML );
		//break;
	}
}



winform.show();
win.loopMessage();