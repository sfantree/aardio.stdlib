//混编C语言
import process.gcc;
process.gcc.check();//Go语言调用C代码依赖GCC

import golang;
var go = golang();//创建Go编译器

string.save("/cgo-test.go",`
package main

/*
#include <stdio.h>
#include <stdlib.h>
void c_print(char *str) {
    printf("%s\n", str);
}
*/
//#cgo LDFLAGS: -Wl,--allow-multiple-definition
import "C" //上面的注释会作为C语言代码编译,#cgo指令用来解决重复定义报错
import "unsafe"

//export getCString
func getCString() *C.char{
 	s := "Hello Cgo" //这是 Go 字符串
 	cs := C.CString(s)//转为 C语言 字符串指针
 	C.c_print(cs)//调用 C函数
 	return cs; 
}

//export freeCString
func freeCString(p *C.char) {
 	C.free(unsafe.Pointer(p))//释放 C语言 字符串指针
}
 
//入口函数没有也要写个空的,实际不执行
func main() {} 
`)

//编译Go源码生成DLL文件
go.buildShared("/cgo-test.go","/cgo-test.dll");

//加载Go编译的DLL，注意要指定cdecl调用约定
var dll = raw.loadDll("/cgo-test.dll",,"cdecl");
 
//直接调用 Go 函数，函数名后加了大写尾标 P 用于声明返回值为指针类型。
var ptr = dll.getCStringP();

//C指针转为 aardio 字符串,都是 UTF-8 直接转很方便。
var str = raw.str(ptr);

//已经不需要C指针了，调用 Go 函数释放
dll.freeCString(ptr);
 
import console;
console.log(str);
console.pause();